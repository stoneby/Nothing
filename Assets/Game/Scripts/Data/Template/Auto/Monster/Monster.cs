/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Template.Auto.Monster
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Monster : TBase
  {
    private Dictionary<int, MonsterTemplate> _monsterTmpls;
    private Dictionary<int, MonsterBattleAITemplate> _monsterAITmpls;

    public Dictionary<int, MonsterTemplate> MonsterTmpls
    {
      get
      {
        return _monsterTmpls;
      }
      set
      {
        __isset.monsterTmpls = true;
        this._monsterTmpls = value;
      }
    }

    public Dictionary<int, MonsterBattleAITemplate> MonsterAITmpls
    {
      get
      {
        return _monsterAITmpls;
      }
      set
      {
        __isset.monsterAITmpls = true;
        this._monsterAITmpls = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool monsterTmpls;
      public bool monsterAITmpls;
    }

    public Monster() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                MonsterTmpls = new Dictionary<int, MonsterTemplate>();
                TMap _map8 = iprot.ReadMapBegin();
                for( int _i9 = 0; _i9 < _map8.Count; ++_i9)
                {
                  int _key10;
                  MonsterTemplate _val11;
                  _key10 = iprot.ReadI32();
                  _val11 = new MonsterTemplate();
                  _val11.Read(iprot);
                  MonsterTmpls[_key10] = _val11;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                MonsterAITmpls = new Dictionary<int, MonsterBattleAITemplate>();
                TMap _map12 = iprot.ReadMapBegin();
                for( int _i13 = 0; _i13 < _map12.Count; ++_i13)
                {
                  int _key14;
                  MonsterBattleAITemplate _val15;
                  _key14 = iprot.ReadI32();
                  _val15 = new MonsterBattleAITemplate();
                  _val15.Read(iprot);
                  MonsterAITmpls[_key14] = _val15;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Monster");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (MonsterTmpls != null && __isset.monsterTmpls) {
        field.Name = "monsterTmpls";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, MonsterTmpls.Count));
          foreach (int _iter16 in MonsterTmpls.Keys)
          {
            oprot.WriteI32(_iter16);
            MonsterTmpls[_iter16].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (MonsterAITmpls != null && __isset.monsterAITmpls) {
        field.Name = "monsterAITmpls";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, MonsterAITmpls.Count));
          foreach (int _iter17 in MonsterAITmpls.Keys)
          {
            oprot.WriteI32(_iter17);
            MonsterAITmpls[_iter17].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Monster(");
      sb.Append("MonsterTmpls: ");
      sb.Append(MonsterTmpls);
      sb.Append(",MonsterAITmpls: ");
      sb.Append(MonsterAITmpls);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
