/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Template.Auto.Skill
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Skill : TBase
  {
    private Dictionary<int, HeroBattleSkillTemplate> _heroBattleSkillTmpls;
    private Dictionary<int, MonsterBattleSkillTemplate> _monsterBattleSkillTmpls;

    public Dictionary<int, HeroBattleSkillTemplate> HeroBattleSkillTmpls
    {
      get
      {
        return _heroBattleSkillTmpls;
      }
      set
      {
        __isset.heroBattleSkillTmpls = true;
        this._heroBattleSkillTmpls = value;
      }
    }

    public Dictionary<int, MonsterBattleSkillTemplate> MonsterBattleSkillTmpls
    {
      get
      {
        return _monsterBattleSkillTmpls;
      }
      set
      {
        __isset.monsterBattleSkillTmpls = true;
        this._monsterBattleSkillTmpls = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool heroBattleSkillTmpls;
      public bool monsterBattleSkillTmpls;
    }

    public Skill() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                HeroBattleSkillTmpls = new Dictionary<int, HeroBattleSkillTemplate>();
                TMap _map28 = iprot.ReadMapBegin();
                for( int _i29 = 0; _i29 < _map28.Count; ++_i29)
                {
                  int _key30;
                  HeroBattleSkillTemplate _val31;
                  _key30 = iprot.ReadI32();
                  _val31 = new HeroBattleSkillTemplate();
                  _val31.Read(iprot);
                  HeroBattleSkillTmpls[_key30] = _val31;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                MonsterBattleSkillTmpls = new Dictionary<int, MonsterBattleSkillTemplate>();
                TMap _map32 = iprot.ReadMapBegin();
                for( int _i33 = 0; _i33 < _map32.Count; ++_i33)
                {
                  int _key34;
                  MonsterBattleSkillTemplate _val35;
                  _key34 = iprot.ReadI32();
                  _val35 = new MonsterBattleSkillTemplate();
                  _val35.Read(iprot);
                  MonsterBattleSkillTmpls[_key34] = _val35;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Skill");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (HeroBattleSkillTmpls != null && __isset.heroBattleSkillTmpls) {
        field.Name = "heroBattleSkillTmpls";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, HeroBattleSkillTmpls.Count));
          foreach (int _iter36 in HeroBattleSkillTmpls.Keys)
          {
            oprot.WriteI32(_iter36);
            HeroBattleSkillTmpls[_iter36].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (MonsterBattleSkillTmpls != null && __isset.monsterBattleSkillTmpls) {
        field.Name = "monsterBattleSkillTmpls";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, MonsterBattleSkillTmpls.Count));
          foreach (int _iter37 in MonsterBattleSkillTmpls.Keys)
          {
            oprot.WriteI32(_iter37);
            MonsterBattleSkillTmpls[_iter37].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Skill(");
      sb.Append("HeroBattleSkillTmpls: ");
      sb.Append(HeroBattleSkillTmpls);
      sb.Append(",MonsterBattleSkillTmpls: ");
      sb.Append(MonsterBattleSkillTmpls);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
