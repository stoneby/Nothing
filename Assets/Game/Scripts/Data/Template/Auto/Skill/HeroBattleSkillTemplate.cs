/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Template.Auto.Skill
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HeroBattleSkillTemplate : TBase
  {
    private int _id;
    private string _name;
    private string _desc;
    private int _skillType;
    private int _level;
    private int _maxLevel;
    private int _nextSkillId;
    private int _comperhendAble;
    private int _triggerId;
    private int _triggerRate;
    private int _costMP;
    private List<SkillBattleConditionData> _skillConditionList;
    private List<SkillTargetGetterData> _enemyTargetList;
    private List<SkillTargetGetterData> _friendTargetList;
    private List<SkillBattleEffectData> _effectList;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    /// <summary>
    /// 技能名称
    /// </summary>
    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    /// <summary>
    /// 技能描述
    /// </summary>
    public string Desc
    {
      get
      {
        return _desc;
      }
      set
      {
        __isset.desc = true;
        this._desc = value;
      }
    }

    /// <summary>
    /// 技能类型
    /// </summary>
    public int SkillType
    {
      get
      {
        return _skillType;
      }
      set
      {
        __isset.skillType = true;
        this._skillType = value;
      }
    }

    /// <summary>
    /// 技能等级
    /// </summary>
    public int Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }

    /// <summary>
    /// 最高等级
    /// </summary>
    public int MaxLevel
    {
      get
      {
        return _maxLevel;
      }
      set
      {
        __isset.maxLevel = true;
        this._maxLevel = value;
      }
    }

    /// <summary>
    /// 下一等级技能ID
    /// </summary>
    public int NextSkillId
    {
      get
      {
        return _nextSkillId;
      }
      set
      {
        __isset.nextSkillId = true;
        this._nextSkillId = value;
      }
    }

    /// <summary>
    /// 是否能被领悟
    /// </summary>
    public int ComperhendAble
    {
      get
      {
        return _comperhendAble;
      }
      set
      {
        __isset.comperhendAble = true;
        this._comperhendAble = value;
      }
    }

    /// <summary>
    /// 触发节点
    /// </summary>
    public int TriggerId
    {
      get
      {
        return _triggerId;
      }
      set
      {
        __isset.triggerId = true;
        this._triggerId = value;
      }
    }

    /// <summary>
    /// 触发几率
    /// </summary>
    public int TriggerRate
    {
      get
      {
        return _triggerRate;
      }
      set
      {
        __isset.triggerRate = true;
        this._triggerRate = value;
      }
    }

    /// <summary>
    /// 消耗气力
    /// </summary>
    public int CostMP
    {
      get
      {
        return _costMP;
      }
      set
      {
        __isset.costMP = true;
        this._costMP = value;
      }
    }

    /// <summary>
    /// 发动条件
    /// </summary>
    public List<SkillBattleConditionData> SkillConditionList
    {
      get
      {
        return _skillConditionList;
      }
      set
      {
        __isset.skillConditionList = true;
        this._skillConditionList = value;
      }
    }

    /// <summary>
    /// 对敌发动技能筛选条件
    /// </summary>
    public List<SkillTargetGetterData> EnemyTargetList
    {
      get
      {
        return _enemyTargetList;
      }
      set
      {
        __isset.enemyTargetList = true;
        this._enemyTargetList = value;
      }
    }

    /// <summary>
    /// 对己发动技能筛选条件
    /// </summary>
    public List<SkillTargetGetterData> FriendTargetList
    {
      get
      {
        return _friendTargetList;
      }
      set
      {
        __isset.friendTargetList = true;
        this._friendTargetList = value;
      }
    }

    /// <summary>
    /// 效果列表(包括对敌，对己)
    /// </summary>
    public List<SkillBattleEffectData> EffectList
    {
      get
      {
        return _effectList;
      }
      set
      {
        __isset.effectList = true;
        this._effectList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool name;
      public bool desc;
      public bool skillType;
      public bool level;
      public bool maxLevel;
      public bool nextSkillId;
      public bool comperhendAble;
      public bool triggerId;
      public bool triggerRate;
      public bool costMP;
      public bool skillConditionList;
      public bool enemyTargetList;
      public bool friendTargetList;
      public bool effectList;
    }

    public HeroBattleSkillTemplate() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Desc = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              SkillType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Level = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              MaxLevel = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              NextSkillId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              ComperhendAble = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              TriggerId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              TriggerRate = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              CostMP = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.List) {
              {
                SkillConditionList = new List<SkillBattleConditionData>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  SkillBattleConditionData _elem2 = new SkillBattleConditionData();
                  _elem2 = new SkillBattleConditionData();
                  _elem2.Read(iprot);
                  SkillConditionList.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.List) {
              {
                EnemyTargetList = new List<SkillTargetGetterData>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  SkillTargetGetterData _elem5 = new SkillTargetGetterData();
                  _elem5 = new SkillTargetGetterData();
                  _elem5.Read(iprot);
                  EnemyTargetList.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.List) {
              {
                FriendTargetList = new List<SkillTargetGetterData>();
                TList _list6 = iprot.ReadListBegin();
                for( int _i7 = 0; _i7 < _list6.Count; ++_i7)
                {
                  SkillTargetGetterData _elem8 = new SkillTargetGetterData();
                  _elem8 = new SkillTargetGetterData();
                  _elem8.Read(iprot);
                  FriendTargetList.Add(_elem8);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.List) {
              {
                EffectList = new List<SkillBattleEffectData>();
                TList _list9 = iprot.ReadListBegin();
                for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                {
                  SkillBattleEffectData _elem11 = new SkillBattleEffectData();
                  _elem11 = new SkillBattleEffectData();
                  _elem11.Read(iprot);
                  EffectList.Add(_elem11);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HeroBattleSkillTemplate");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Desc != null && __isset.desc) {
        field.Name = "desc";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Desc);
        oprot.WriteFieldEnd();
      }
      if (__isset.skillType) {
        field.Name = "skillType";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SkillType);
        oprot.WriteFieldEnd();
      }
      if (__isset.level) {
        field.Name = "level";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Level);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxLevel) {
        field.Name = "maxLevel";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.nextSkillId) {
        field.Name = "nextSkillId";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NextSkillId);
        oprot.WriteFieldEnd();
      }
      if (__isset.comperhendAble) {
        field.Name = "comperhendAble";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ComperhendAble);
        oprot.WriteFieldEnd();
      }
      if (__isset.triggerId) {
        field.Name = "triggerId";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TriggerId);
        oprot.WriteFieldEnd();
      }
      if (__isset.triggerRate) {
        field.Name = "triggerRate";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TriggerRate);
        oprot.WriteFieldEnd();
      }
      if (__isset.costMP) {
        field.Name = "costMP";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CostMP);
        oprot.WriteFieldEnd();
      }
      if (SkillConditionList != null && __isset.skillConditionList) {
        field.Name = "skillConditionList";
        field.Type = TType.List;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, SkillConditionList.Count));
          foreach (SkillBattleConditionData _iter12 in SkillConditionList)
          {
            _iter12.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (EnemyTargetList != null && __isset.enemyTargetList) {
        field.Name = "enemyTargetList";
        field.Type = TType.List;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, EnemyTargetList.Count));
          foreach (SkillTargetGetterData _iter13 in EnemyTargetList)
          {
            _iter13.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (FriendTargetList != null && __isset.friendTargetList) {
        field.Name = "friendTargetList";
        field.Type = TType.List;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, FriendTargetList.Count));
          foreach (SkillTargetGetterData _iter14 in FriendTargetList)
          {
            _iter14.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (EffectList != null && __isset.effectList) {
        field.Name = "effectList";
        field.Type = TType.List;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, EffectList.Count));
          foreach (SkillBattleEffectData _iter15 in EffectList)
          {
            _iter15.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HeroBattleSkillTemplate(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",Desc: ");
      sb.Append(Desc);
      sb.Append(",SkillType: ");
      sb.Append(SkillType);
      sb.Append(",Level: ");
      sb.Append(Level);
      sb.Append(",MaxLevel: ");
      sb.Append(MaxLevel);
      sb.Append(",NextSkillId: ");
      sb.Append(NextSkillId);
      sb.Append(",ComperhendAble: ");
      sb.Append(ComperhendAble);
      sb.Append(",TriggerId: ");
      sb.Append(TriggerId);
      sb.Append(",TriggerRate: ");
      sb.Append(TriggerRate);
      sb.Append(",CostMP: ");
      sb.Append(CostMP);
      sb.Append(",SkillConditionList: ");
      sb.Append(SkillConditionList);
      sb.Append(",EnemyTargetList: ");
      sb.Append(EnemyTargetList);
      sb.Append(",FriendTargetList: ");
      sb.Append(FriendTargetList);
      sb.Append(",EffectList: ");
      sb.Append(EffectList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
