/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Template.Auto.Bag
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BagBaseTemplate : TBase
  {
    private int _id;
    private sbyte _heroBagBaseCount;
    private sbyte _itemBagBaseCount;
    private sbyte _extendHeroCount;
    private sbyte _extendItemCount;
    private int _eachExtFriendNum;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    /// <summary>
    /// 武将背包初始数量
    /// </summary>
    public sbyte HeroBagBaseCount
    {
      get
      {
        return _heroBagBaseCount;
      }
      set
      {
        __isset.heroBagBaseCount = true;
        this._heroBagBaseCount = value;
      }
    }

    /// <summary>
    /// 道具背包初始数量
    /// </summary>
    public sbyte ItemBagBaseCount
    {
      get
      {
        return _itemBagBaseCount;
      }
      set
      {
        __isset.itemBagBaseCount = true;
        this._itemBagBaseCount = value;
      }
    }

    /// <summary>
    /// 每次扩充武将背包数
    /// </summary>
    public sbyte ExtendHeroCount
    {
      get
      {
        return _extendHeroCount;
      }
      set
      {
        __isset.extendHeroCount = true;
        this._extendHeroCount = value;
      }
    }

    /// <summary>
    /// 每次扩充道具背包数
    /// </summary>
    public sbyte ExtendItemCount
    {
      get
      {
        return _extendItemCount;
      }
      set
      {
        __isset.extendItemCount = true;
        this._extendItemCount = value;
      }
    }

    /// <summary>
    /// 每次扩充武将背包数
    /// </summary>
    public int EachExtFriendNum
    {
      get
      {
        return _eachExtFriendNum;
      }
      set
      {
        __isset.eachExtFriendNum = true;
        this._eachExtFriendNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool heroBagBaseCount;
      public bool itemBagBaseCount;
      public bool extendHeroCount;
      public bool extendItemCount;
      public bool eachExtFriendNum;
    }

    public BagBaseTemplate() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              HeroBagBaseCount = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              ItemBagBaseCount = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              ExtendHeroCount = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              ExtendItemCount = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              EachExtFriendNum = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BagBaseTemplate");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.heroBagBaseCount) {
        field.Name = "heroBagBaseCount";
        field.Type = TType.Byte;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(HeroBagBaseCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.itemBagBaseCount) {
        field.Name = "itemBagBaseCount";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ItemBagBaseCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.extendHeroCount) {
        field.Name = "extendHeroCount";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ExtendHeroCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.extendItemCount) {
        field.Name = "extendItemCount";
        field.Type = TType.Byte;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ExtendItemCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.eachExtFriendNum) {
        field.Name = "eachExtFriendNum";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EachExtFriendNum);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BagBaseTemplate(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",HeroBagBaseCount: ");
      sb.Append(HeroBagBaseCount);
      sb.Append(",ItemBagBaseCount: ");
      sb.Append(ItemBagBaseCount);
      sb.Append(",ExtendHeroCount: ");
      sb.Append(ExtendHeroCount);
      sb.Append(",ExtendItemCount: ");
      sb.Append(ExtendItemCount);
      sb.Append(",EachExtFriendNum: ");
      sb.Append(EachExtFriendNum);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
