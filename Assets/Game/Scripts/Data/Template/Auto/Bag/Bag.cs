/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Template.Auto.Bag
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Bag : TBase
  {
    private Dictionary<int, BagBaseTemplate> _bagBaseTmpls;
    private Dictionary<int, BagHeroExtendCostTemplate> _heroExtTmpls;
    private Dictionary<int, BagItemExtendCostTemplate> _itemExtTmpls;
    private Dictionary<int, FriendBagExtendTemplate> _friendExtTmpls;

    public Dictionary<int, BagBaseTemplate> BagBaseTmpls
    {
      get
      {
        return _bagBaseTmpls;
      }
      set
      {
        __isset.bagBaseTmpls = true;
        this._bagBaseTmpls = value;
      }
    }

    public Dictionary<int, BagHeroExtendCostTemplate> HeroExtTmpls
    {
      get
      {
        return _heroExtTmpls;
      }
      set
      {
        __isset.heroExtTmpls = true;
        this._heroExtTmpls = value;
      }
    }

    public Dictionary<int, BagItemExtendCostTemplate> ItemExtTmpls
    {
      get
      {
        return _itemExtTmpls;
      }
      set
      {
        __isset.itemExtTmpls = true;
        this._itemExtTmpls = value;
      }
    }

    public Dictionary<int, FriendBagExtendTemplate> FriendExtTmpls
    {
      get
      {
        return _friendExtTmpls;
      }
      set
      {
        __isset.friendExtTmpls = true;
        this._friendExtTmpls = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool bagBaseTmpls;
      public bool heroExtTmpls;
      public bool itemExtTmpls;
      public bool friendExtTmpls;
    }

    public Bag() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                BagBaseTmpls = new Dictionary<int, BagBaseTemplate>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  int _key2;
                  BagBaseTemplate _val3;
                  _key2 = iprot.ReadI32();
                  _val3 = new BagBaseTemplate();
                  _val3.Read(iprot);
                  BagBaseTmpls[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                HeroExtTmpls = new Dictionary<int, BagHeroExtendCostTemplate>();
                TMap _map4 = iprot.ReadMapBegin();
                for( int _i5 = 0; _i5 < _map4.Count; ++_i5)
                {
                  int _key6;
                  BagHeroExtendCostTemplate _val7;
                  _key6 = iprot.ReadI32();
                  _val7 = new BagHeroExtendCostTemplate();
                  _val7.Read(iprot);
                  HeroExtTmpls[_key6] = _val7;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                ItemExtTmpls = new Dictionary<int, BagItemExtendCostTemplate>();
                TMap _map8 = iprot.ReadMapBegin();
                for( int _i9 = 0; _i9 < _map8.Count; ++_i9)
                {
                  int _key10;
                  BagItemExtendCostTemplate _val11;
                  _key10 = iprot.ReadI32();
                  _val11 = new BagItemExtendCostTemplate();
                  _val11.Read(iprot);
                  ItemExtTmpls[_key10] = _val11;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                FriendExtTmpls = new Dictionary<int, FriendBagExtendTemplate>();
                TMap _map12 = iprot.ReadMapBegin();
                for( int _i13 = 0; _i13 < _map12.Count; ++_i13)
                {
                  int _key14;
                  FriendBagExtendTemplate _val15;
                  _key14 = iprot.ReadI32();
                  _val15 = new FriendBagExtendTemplate();
                  _val15.Read(iprot);
                  FriendExtTmpls[_key14] = _val15;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Bag");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (BagBaseTmpls != null && __isset.bagBaseTmpls) {
        field.Name = "bagBaseTmpls";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, BagBaseTmpls.Count));
          foreach (int _iter16 in BagBaseTmpls.Keys)
          {
            oprot.WriteI32(_iter16);
            BagBaseTmpls[_iter16].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (HeroExtTmpls != null && __isset.heroExtTmpls) {
        field.Name = "heroExtTmpls";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, HeroExtTmpls.Count));
          foreach (int _iter17 in HeroExtTmpls.Keys)
          {
            oprot.WriteI32(_iter17);
            HeroExtTmpls[_iter17].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ItemExtTmpls != null && __isset.itemExtTmpls) {
        field.Name = "itemExtTmpls";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, ItemExtTmpls.Count));
          foreach (int _iter18 in ItemExtTmpls.Keys)
          {
            oprot.WriteI32(_iter18);
            ItemExtTmpls[_iter18].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (FriendExtTmpls != null && __isset.friendExtTmpls) {
        field.Name = "friendExtTmpls";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, FriendExtTmpls.Count));
          foreach (int _iter19 in FriendExtTmpls.Keys)
          {
            oprot.WriteI32(_iter19);
            FriendExtTmpls[_iter19].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Bag(");
      sb.Append("BagBaseTmpls: ");
      sb.Append(BagBaseTmpls);
      sb.Append(",HeroExtTmpls: ");
      sb.Append(HeroExtTmpls);
      sb.Append(",ItemExtTmpls: ");
      sb.Append(ItemExtTmpls);
      sb.Append(",FriendExtTmpls: ");
      sb.Append(FriendExtTmpls);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
