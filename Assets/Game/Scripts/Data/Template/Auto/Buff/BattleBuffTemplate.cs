/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Template.Auto.Buff
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BattleBuffTemplate : TBase
  {
    private int _id;
    private int _buffFlag;
    private int _typeA;
    private int _typeB;
    private int _proiority;
    private int _stackingCount;
    private int _round;
    private int _buffShowId;
    private int _buffKey;
    private List<string> _buffParams;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    /// <summary>
    /// buff or debuff
    /// </summary>
    public int BuffFlag
    {
      get
      {
        return _buffFlag;
      }
      set
      {
        __isset.buffFlag = true;
        this._buffFlag = value;
      }
    }

    /// <summary>
    /// buff大类
    /// </summary>
    public int TypeA
    {
      get
      {
        return _typeA;
      }
      set
      {
        __isset.typeA = true;
        this._typeA = value;
      }
    }

    /// <summary>
    /// buff小类
    /// </summary>
    public int TypeB
    {
      get
      {
        return _typeB;
      }
      set
      {
        __isset.typeB = true;
        this._typeB = value;
      }
    }

    /// <summary>
    /// buff优先级
    /// </summary>
    public int Proiority
    {
      get
      {
        return _proiority;
      }
      set
      {
        __isset.proiority = true;
        this._proiority = value;
      }
    }

    /// <summary>
    /// 单个BUFF最大层数（最少为1）
    /// </summary>
    public int StackingCount
    {
      get
      {
        return _stackingCount;
      }
      set
      {
        __isset.stackingCount = true;
        this._stackingCount = value;
      }
    }

    /// <summary>
    /// 持续回合
    /// </summary>
    public int Round
    {
      get
      {
        return _round;
      }
      set
      {
        __isset.round = true;
        this._round = value;
      }
    }

    /// <summary>
    /// buff效果类型
    /// </summary>
    public int BuffShowId
    {
      get
      {
        return _buffShowId;
      }
      set
      {
        __isset.buffShowId = true;
        this._buffShowId = value;
      }
    }

    public int BuffKey
    {
      get
      {
        return _buffKey;
      }
      set
      {
        __isset.buffKey = true;
        this._buffKey = value;
      }
    }

    /// <summary>
    /// buff参数列表
    /// </summary>
    public List<string> BuffParams
    {
      get
      {
        return _buffParams;
      }
      set
      {
        __isset.buffParams = true;
        this._buffParams = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool buffFlag;
      public bool typeA;
      public bool typeB;
      public bool proiority;
      public bool stackingCount;
      public bool round;
      public bool buffShowId;
      public bool buffKey;
      public bool buffParams;
    }

    public BattleBuffTemplate() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              BuffFlag = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              TypeA = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              TypeB = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Proiority = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              StackingCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Round = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              BuffShowId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              BuffKey = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.List) {
              {
                BuffParams = new List<string>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  string _elem2 = null;
                  _elem2 = iprot.ReadString();
                  BuffParams.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BattleBuffTemplate");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.buffFlag) {
        field.Name = "buffFlag";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BuffFlag);
        oprot.WriteFieldEnd();
      }
      if (__isset.typeA) {
        field.Name = "typeA";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TypeA);
        oprot.WriteFieldEnd();
      }
      if (__isset.typeB) {
        field.Name = "typeB";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TypeB);
        oprot.WriteFieldEnd();
      }
      if (__isset.proiority) {
        field.Name = "proiority";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Proiority);
        oprot.WriteFieldEnd();
      }
      if (__isset.stackingCount) {
        field.Name = "stackingCount";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StackingCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.round) {
        field.Name = "round";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Round);
        oprot.WriteFieldEnd();
      }
      if (__isset.buffShowId) {
        field.Name = "buffShowId";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BuffShowId);
        oprot.WriteFieldEnd();
      }
      if (__isset.buffKey) {
        field.Name = "buffKey";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BuffKey);
        oprot.WriteFieldEnd();
      }
      if (BuffParams != null && __isset.buffParams) {
        field.Name = "buffParams";
        field.Type = TType.List;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, BuffParams.Count));
          foreach (string _iter3 in BuffParams)
          {
            oprot.WriteString(_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BattleBuffTemplate(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",BuffFlag: ");
      sb.Append(BuffFlag);
      sb.Append(",TypeA: ");
      sb.Append(TypeA);
      sb.Append(",TypeB: ");
      sb.Append(TypeB);
      sb.Append(",Proiority: ");
      sb.Append(Proiority);
      sb.Append(",StackingCount: ");
      sb.Append(StackingCount);
      sb.Append(",Round: ");
      sb.Append(Round);
      sb.Append(",BuffShowId: ");
      sb.Append(BuffShowId);
      sb.Append(",BuffKey: ");
      sb.Append(BuffKey);
      sb.Append(",BuffParams: ");
      sb.Append(BuffParams);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
