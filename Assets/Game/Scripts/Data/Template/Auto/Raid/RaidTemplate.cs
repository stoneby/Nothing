/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Template.Auto.Raid
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RaidTemplate : TBase
  {
    private int _id;
    private string _raidName;
    private string _raidDesc;
    private int _raidType;
    private int _mapId;
    private int _openLvl;
    private int _allStarRewardItem;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    /// <summary>
    /// 副本名称
    /// </summary>
    public string RaidName
    {
      get
      {
        return _raidName;
      }
      set
      {
        __isset.raidName = true;
        this._raidName = value;
      }
    }

    /// <summary>
    /// 副本描述
    /// </summary>
    public string RaidDesc
    {
      get
      {
        return _raidDesc;
      }
      set
      {
        __isset.raidDesc = true;
        this._raidDesc = value;
      }
    }

    /// <summary>
    /// 关卡类型
    /// </summary>
    public int RaidType
    {
      get
      {
        return _raidType;
      }
      set
      {
        __isset.raidType = true;
        this._raidType = value;
      }
    }

    /// <summary>
    /// 所属地图
    /// </summary>
    public int MapId
    {
      get
      {
        return _mapId;
      }
      set
      {
        __isset.mapId = true;
        this._mapId = value;
      }
    }

    /// <summary>
    /// 开启等级
    /// </summary>
    public int OpenLvl
    {
      get
      {
        return _openLvl;
      }
      set
      {
        __isset.openLvl = true;
        this._openLvl = value;
      }
    }

    /// <summary>
    /// 满星奖励给道具
    /// </summary>
    public int AllStarRewardItem
    {
      get
      {
        return _allStarRewardItem;
      }
      set
      {
        __isset.allStarRewardItem = true;
        this._allStarRewardItem = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool raidName;
      public bool raidDesc;
      public bool raidType;
      public bool mapId;
      public bool openLvl;
      public bool allStarRewardItem;
    }

    public RaidTemplate() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              RaidName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              RaidDesc = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              RaidType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              MapId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              OpenLvl = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              AllStarRewardItem = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RaidTemplate");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (RaidName != null && __isset.raidName) {
        field.Name = "raidName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RaidName);
        oprot.WriteFieldEnd();
      }
      if (RaidDesc != null && __isset.raidDesc) {
        field.Name = "raidDesc";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RaidDesc);
        oprot.WriteFieldEnd();
      }
      if (__isset.raidType) {
        field.Name = "raidType";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RaidType);
        oprot.WriteFieldEnd();
      }
      if (__isset.mapId) {
        field.Name = "mapId";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MapId);
        oprot.WriteFieldEnd();
      }
      if (__isset.openLvl) {
        field.Name = "openLvl";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(OpenLvl);
        oprot.WriteFieldEnd();
      }
      if (__isset.allStarRewardItem) {
        field.Name = "allStarRewardItem";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AllStarRewardItem);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("RaidTemplate(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",RaidName: ");
      sb.Append(RaidName);
      sb.Append(",RaidDesc: ");
      sb.Append(RaidDesc);
      sb.Append(",RaidType: ");
      sb.Append(RaidType);
      sb.Append(",MapId: ");
      sb.Append(MapId);
      sb.Append(",OpenLvl: ");
      sb.Append(OpenLvl);
      sb.Append(",AllStarRewardItem: ");
      sb.Append(AllStarRewardItem);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
