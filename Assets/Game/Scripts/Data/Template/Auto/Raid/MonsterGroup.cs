/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Template.Auto.Raid
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MonsterGroup : TBase
  {
    private int _arg_A;
    private int _arg_B;
    private int _arg_C;

    public int Arg_A
    {
      get
      {
        return _arg_A;
      }
      set
      {
        __isset.arg_A = true;
        this._arg_A = value;
      }
    }

    public int Arg_B
    {
      get
      {
        return _arg_B;
      }
      set
      {
        __isset.arg_B = true;
        this._arg_B = value;
      }
    }

    public int Arg_C
    {
      get
      {
        return _arg_C;
      }
      set
      {
        __isset.arg_C = true;
        this._arg_C = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool arg_A;
      public bool arg_B;
      public bool arg_C;
    }

    public MonsterGroup() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Arg_A = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Arg_B = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Arg_C = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MonsterGroup");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.arg_A) {
        field.Name = "arg_A";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Arg_A);
        oprot.WriteFieldEnd();
      }
      if (__isset.arg_B) {
        field.Name = "arg_B";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Arg_B);
        oprot.WriteFieldEnd();
      }
      if (__isset.arg_C) {
        field.Name = "arg_C";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Arg_C);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("MonsterGroup(");
      sb.Append("Arg_A: ");
      sb.Append(Arg_A);
      sb.Append(",Arg_B: ");
      sb.Append(Arg_B);
      sb.Append(",Arg_C: ");
      sb.Append(Arg_C);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
