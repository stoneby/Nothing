/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Template.Auto.Item
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ArmorItemTemplate : TBase
  {
    private BaseItemTemplate _baseTmpl;
    private bool _canUpLvl;
    private bool _canEvolution;
    private int _upLimit;
    private int _attack;
    private int _attackLvlParam;
    private int _hp;
    private int _hpLvlParam;
    private int _recover;
    private int _recoverLvlParam;
    private int _mp;

    /// <summary>
    /// 基础模板信息
    /// </summary>
    public BaseItemTemplate BaseTmpl
    {
      get
      {
        return _baseTmpl;
      }
      set
      {
        __isset.baseTmpl = true;
        this._baseTmpl = value;
      }
    }

    /// <summary>
    /// 可升级
    /// </summary>
    public bool CanUpLvl
    {
      get
      {
        return _canUpLvl;
      }
      set
      {
        __isset.canUpLvl = true;
        this._canUpLvl = value;
      }
    }

    /// <summary>
    /// 可进化
    /// </summary>
    public bool CanEvolution
    {
      get
      {
        return _canEvolution;
      }
      set
      {
        __isset.canEvolution = true;
        this._canEvolution = value;
      }
    }

    /// <summary>
    /// 突破上限值
    /// </summary>
    public int UpLimit
    {
      get
      {
        return _upLimit;
      }
      set
      {
        __isset.upLimit = true;
        this._upLimit = value;
      }
    }

    /// <summary>
    /// 攻击力
    /// </summary>
    public int Attack
    {
      get
      {
        return _attack;
      }
      set
      {
        __isset.attack = true;
        this._attack = value;
      }
    }

    /// <summary>
    /// 等级提升攻击加成
    /// </summary>
    public int AttackLvlParam
    {
      get
      {
        return _attackLvlParam;
      }
      set
      {
        __isset.attackLvlParam = true;
        this._attackLvlParam = value;
      }
    }

    /// <summary>
    /// hp
    /// </summary>
    public int Hp
    {
      get
      {
        return _hp;
      }
      set
      {
        __isset.hp = true;
        this._hp = value;
      }
    }

    /// <summary>
    /// 等级提升hp加成
    /// </summary>
    public int HpLvlParam
    {
      get
      {
        return _hpLvlParam;
      }
      set
      {
        __isset.hpLvlParam = true;
        this._hpLvlParam = value;
      }
    }

    /// <summary>
    /// 回复力
    /// </summary>
    public int Recover
    {
      get
      {
        return _recover;
      }
      set
      {
        __isset.recover = true;
        this._recover = value;
      }
    }

    /// <summary>
    /// 等级提升回复加成
    /// </summary>
    public int RecoverLvlParam
    {
      get
      {
        return _recoverLvlParam;
      }
      set
      {
        __isset.recoverLvlParam = true;
        this._recoverLvlParam = value;
      }
    }

    /// <summary>
    /// 气力值
    /// </summary>
    public int Mp
    {
      get
      {
        return _mp;
      }
      set
      {
        __isset.mp = true;
        this._mp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool baseTmpl;
      public bool canUpLvl;
      public bool canEvolution;
      public bool upLimit;
      public bool attack;
      public bool attackLvlParam;
      public bool hp;
      public bool hpLvlParam;
      public bool recover;
      public bool recoverLvlParam;
      public bool mp;
    }

    public ArmorItemTemplate() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              BaseTmpl = new BaseItemTemplate();
              BaseTmpl.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              CanUpLvl = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              CanEvolution = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              UpLimit = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Attack = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              AttackLvlParam = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Hp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              HpLvlParam = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              Recover = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              RecoverLvlParam = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              Mp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ArmorItemTemplate");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (BaseTmpl != null && __isset.baseTmpl) {
        field.Name = "baseTmpl";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        BaseTmpl.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.canUpLvl) {
        field.Name = "canUpLvl";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanUpLvl);
        oprot.WriteFieldEnd();
      }
      if (__isset.canEvolution) {
        field.Name = "canEvolution";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanEvolution);
        oprot.WriteFieldEnd();
      }
      if (__isset.upLimit) {
        field.Name = "upLimit";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UpLimit);
        oprot.WriteFieldEnd();
      }
      if (__isset.attack) {
        field.Name = "attack";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Attack);
        oprot.WriteFieldEnd();
      }
      if (__isset.attackLvlParam) {
        field.Name = "attackLvlParam";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AttackLvlParam);
        oprot.WriteFieldEnd();
      }
      if (__isset.hp) {
        field.Name = "hp";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Hp);
        oprot.WriteFieldEnd();
      }
      if (__isset.hpLvlParam) {
        field.Name = "hpLvlParam";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(HpLvlParam);
        oprot.WriteFieldEnd();
      }
      if (__isset.recover) {
        field.Name = "recover";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Recover);
        oprot.WriteFieldEnd();
      }
      if (__isset.recoverLvlParam) {
        field.Name = "recoverLvlParam";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RecoverLvlParam);
        oprot.WriteFieldEnd();
      }
      if (__isset.mp) {
        field.Name = "mp";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Mp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ArmorItemTemplate(");
      sb.Append("BaseTmpl: ");
      sb.Append(BaseTmpl== null ? "<null>" : BaseTmpl.ToString());
      sb.Append(",CanUpLvl: ");
      sb.Append(CanUpLvl);
      sb.Append(",CanEvolution: ");
      sb.Append(CanEvolution);
      sb.Append(",UpLimit: ");
      sb.Append(UpLimit);
      sb.Append(",Attack: ");
      sb.Append(Attack);
      sb.Append(",AttackLvlParam: ");
      sb.Append(AttackLvlParam);
      sb.Append(",Hp: ");
      sb.Append(Hp);
      sb.Append(",HpLvlParam: ");
      sb.Append(HpLvlParam);
      sb.Append(",Recover: ");
      sb.Append(Recover);
      sb.Append(",RecoverLvlParam: ");
      sb.Append(RecoverLvlParam);
      sb.Append(",Mp: ");
      sb.Append(Mp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
