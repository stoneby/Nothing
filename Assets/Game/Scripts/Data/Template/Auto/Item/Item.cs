/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Template.Auto.Item
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Item : TBase
  {
    private Dictionary<int, EquipItemTemplate> _equipTmpls;
    private Dictionary<int, ArmorItemTemplate> _armorTmpls;
    private Dictionary<int, MaterialItemTemplate> _materialTmpls;

    public Dictionary<int, EquipItemTemplate> EquipTmpls
    {
      get
      {
        return _equipTmpls;
      }
      set
      {
        __isset.equipTmpls = true;
        this._equipTmpls = value;
      }
    }

    public Dictionary<int, ArmorItemTemplate> ArmorTmpls
    {
      get
      {
        return _armorTmpls;
      }
      set
      {
        __isset.armorTmpls = true;
        this._armorTmpls = value;
      }
    }

    public Dictionary<int, MaterialItemTemplate> MaterialTmpls
    {
      get
      {
        return _materialTmpls;
      }
      set
      {
        __isset.materialTmpls = true;
        this._materialTmpls = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool equipTmpls;
      public bool armorTmpls;
      public bool materialTmpls;
    }

    public Item() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                EquipTmpls = new Dictionary<int, EquipItemTemplate>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  int _key2;
                  EquipItemTemplate _val3;
                  _key2 = iprot.ReadI32();
                  _val3 = new EquipItemTemplate();
                  _val3.Read(iprot);
                  EquipTmpls[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                ArmorTmpls = new Dictionary<int, ArmorItemTemplate>();
                TMap _map4 = iprot.ReadMapBegin();
                for( int _i5 = 0; _i5 < _map4.Count; ++_i5)
                {
                  int _key6;
                  ArmorItemTemplate _val7;
                  _key6 = iprot.ReadI32();
                  _val7 = new ArmorItemTemplate();
                  _val7.Read(iprot);
                  ArmorTmpls[_key6] = _val7;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                MaterialTmpls = new Dictionary<int, MaterialItemTemplate>();
                TMap _map8 = iprot.ReadMapBegin();
                for( int _i9 = 0; _i9 < _map8.Count; ++_i9)
                {
                  int _key10;
                  MaterialItemTemplate _val11;
                  _key10 = iprot.ReadI32();
                  _val11 = new MaterialItemTemplate();
                  _val11.Read(iprot);
                  MaterialTmpls[_key10] = _val11;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Item");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (EquipTmpls != null && __isset.equipTmpls) {
        field.Name = "equipTmpls";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, EquipTmpls.Count));
          foreach (int _iter12 in EquipTmpls.Keys)
          {
            oprot.WriteI32(_iter12);
            EquipTmpls[_iter12].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ArmorTmpls != null && __isset.armorTmpls) {
        field.Name = "armorTmpls";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, ArmorTmpls.Count));
          foreach (int _iter13 in ArmorTmpls.Keys)
          {
            oprot.WriteI32(_iter13);
            ArmorTmpls[_iter13].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (MaterialTmpls != null && __isset.materialTmpls) {
        field.Name = "materialTmpls";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, MaterialTmpls.Count));
          foreach (int _iter14 in MaterialTmpls.Keys)
          {
            oprot.WriteI32(_iter14);
            MaterialTmpls[_iter14].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Item(");
      sb.Append("EquipTmpls: ");
      sb.Append(EquipTmpls);
      sb.Append(",ArmorTmpls: ");
      sb.Append(ArmorTmpls);
      sb.Append(",MaterialTmpls: ");
      sb.Append(MaterialTmpls);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
