/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Template.Auto.Item
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ItemEvoluteTemplate : TBase
  {
    private int _id;
    private int _targetItemId;
    private int _costGold;
    private List<ItemEvoluteParam> _needMaterials;

    /// <summary>
    /// 道具id
    /// </summary>
    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    /// <summary>
    /// 目标道具id
    /// </summary>
    public int TargetItemId
    {
      get
      {
        return _targetItemId;
      }
      set
      {
        __isset.targetItemId = true;
        this._targetItemId = value;
      }
    }

    /// <summary>
    /// 消耗金币
    /// </summary>
    public int CostGold
    {
      get
      {
        return _costGold;
      }
      set
      {
        __isset.costGold = true;
        this._costGold = value;
      }
    }

    /// <summary>
    /// 消耗材料
    /// </summary>
    public List<ItemEvoluteParam> NeedMaterials
    {
      get
      {
        return _needMaterials;
      }
      set
      {
        __isset.needMaterials = true;
        this._needMaterials = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool targetItemId;
      public bool costGold;
      public bool needMaterials;
    }

    public ItemEvoluteTemplate() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              TargetItemId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              CostGold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                NeedMaterials = new List<ItemEvoluteParam>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  ItemEvoluteParam _elem2 = new ItemEvoluteParam();
                  _elem2 = new ItemEvoluteParam();
                  _elem2.Read(iprot);
                  NeedMaterials.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ItemEvoluteTemplate");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.targetItemId) {
        field.Name = "targetItemId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TargetItemId);
        oprot.WriteFieldEnd();
      }
      if (__isset.costGold) {
        field.Name = "costGold";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CostGold);
        oprot.WriteFieldEnd();
      }
      if (NeedMaterials != null && __isset.needMaterials) {
        field.Name = "needMaterials";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, NeedMaterials.Count));
          foreach (ItemEvoluteParam _iter3 in NeedMaterials)
          {
            _iter3.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ItemEvoluteTemplate(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",TargetItemId: ");
      sb.Append(TargetItemId);
      sb.Append(",CostGold: ");
      sb.Append(CostGold);
      sb.Append(",NeedMaterials: ");
      sb.Append(NeedMaterials);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
