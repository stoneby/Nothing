/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KXSGCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCRaidAddtion : TBase
  {
    private long _addtionDate;
    private List<KXSGCodec.RaidAddtionInfo> _addtionInfo;

    public long AddtionDate
    {
      get
      {
        return _addtionDate;
      }
      set
      {
        __isset.addtionDate = true;
        this._addtionDate = value;
      }
    }

    public List<KXSGCodec.RaidAddtionInfo> AddtionInfo
    {
      get
      {
        return _addtionInfo;
      }
      set
      {
        __isset.addtionInfo = true;
        this._addtionInfo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool addtionDate;
      public bool addtionInfo;
    }

    public SCRaidAddtion() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              AddtionDate = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                AddtionInfo = new List<KXSGCodec.RaidAddtionInfo>();
                TList _list38 = iprot.ReadListBegin();
                for( int _i39 = 0; _i39 < _list38.Count; ++_i39)
                {
                  KXSGCodec.RaidAddtionInfo _elem40 = new KXSGCodec.RaidAddtionInfo();
                  _elem40 = new KXSGCodec.RaidAddtionInfo();
                  _elem40.Read(iprot);
                  AddtionInfo.Add(_elem40);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SCRaidAddtion");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.addtionDate) {
        field.Name = "addtionDate";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(AddtionDate);
        oprot.WriteFieldEnd();
      }
      if (AddtionInfo != null && __isset.addtionInfo) {
        field.Name = "addtionInfo";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, AddtionInfo.Count));
          foreach (KXSGCodec.RaidAddtionInfo _iter41 in AddtionInfo)
          {
            _iter41.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SCRaidAddtion(");
      sb.Append("AddtionDate: ");
      sb.Append(AddtionDate);
      sb.Append(",AddtionInfo: ");
      sb.Append(AddtionInfo);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
