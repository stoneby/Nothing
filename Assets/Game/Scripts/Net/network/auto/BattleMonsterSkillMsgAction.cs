/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KXSGCodec
{

  /// <summary>
  /// 怪物技能具体信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BattleMonsterSkillMsgAction : TBase
  {
    private int _id;
    private int _extraCDRound;
    private string _extraCDDesc;
    private int _costMp;
    private List<SkillTargetGetterMsgData> _enemyTargetList;
    private List<SkillTargetGetterMsgData> _friendTargetList;
    private List<SkillBattleEffectMsgData> _effectList;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public int ExtraCDRound
    {
      get
      {
        return _extraCDRound;
      }
      set
      {
        __isset.extraCDRound = true;
        this._extraCDRound = value;
      }
    }

    public string ExtraCDDesc
    {
      get
      {
        return _extraCDDesc;
      }
      set
      {
        __isset.extraCDDesc = true;
        this._extraCDDesc = value;
      }
    }

    public int CostMp
    {
      get
      {
        return _costMp;
      }
      set
      {
        __isset.costMp = true;
        this._costMp = value;
      }
    }

    public List<SkillTargetGetterMsgData> EnemyTargetList
    {
      get
      {
        return _enemyTargetList;
      }
      set
      {
        __isset.enemyTargetList = true;
        this._enemyTargetList = value;
      }
    }

    public List<SkillTargetGetterMsgData> FriendTargetList
    {
      get
      {
        return _friendTargetList;
      }
      set
      {
        __isset.friendTargetList = true;
        this._friendTargetList = value;
      }
    }

    public List<SkillBattleEffectMsgData> EffectList
    {
      get
      {
        return _effectList;
      }
      set
      {
        __isset.effectList = true;
        this._effectList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool extraCDRound;
      public bool extraCDDesc;
      public bool costMp;
      public bool enemyTargetList;
      public bool friendTargetList;
      public bool effectList;
    }

    public BattleMonsterSkillMsgAction() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ExtraCDRound = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              ExtraCDDesc = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              CostMp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                EnemyTargetList = new List<SkillTargetGetterMsgData>();
                TList _list16 = iprot.ReadListBegin();
                for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                {
                  SkillTargetGetterMsgData _elem18 = new SkillTargetGetterMsgData();
                  _elem18 = new SkillTargetGetterMsgData();
                  _elem18.Read(iprot);
                  EnemyTargetList.Add(_elem18);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                FriendTargetList = new List<SkillTargetGetterMsgData>();
                TList _list19 = iprot.ReadListBegin();
                for( int _i20 = 0; _i20 < _list19.Count; ++_i20)
                {
                  SkillTargetGetterMsgData _elem21 = new SkillTargetGetterMsgData();
                  _elem21 = new SkillTargetGetterMsgData();
                  _elem21.Read(iprot);
                  FriendTargetList.Add(_elem21);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                EffectList = new List<SkillBattleEffectMsgData>();
                TList _list22 = iprot.ReadListBegin();
                for( int _i23 = 0; _i23 < _list22.Count; ++_i23)
                {
                  SkillBattleEffectMsgData _elem24 = new SkillBattleEffectMsgData();
                  _elem24 = new SkillBattleEffectMsgData();
                  _elem24.Read(iprot);
                  EffectList.Add(_elem24);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BattleMonsterSkillMsgAction");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.extraCDRound) {
        field.Name = "extraCDRound";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ExtraCDRound);
        oprot.WriteFieldEnd();
      }
      if (ExtraCDDesc != null && __isset.extraCDDesc) {
        field.Name = "extraCDDesc";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExtraCDDesc);
        oprot.WriteFieldEnd();
      }
      if (__isset.costMp) {
        field.Name = "costMp";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CostMp);
        oprot.WriteFieldEnd();
      }
      if (EnemyTargetList != null && __isset.enemyTargetList) {
        field.Name = "enemyTargetList";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, EnemyTargetList.Count));
          foreach (SkillTargetGetterMsgData _iter25 in EnemyTargetList)
          {
            _iter25.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (FriendTargetList != null && __isset.friendTargetList) {
        field.Name = "friendTargetList";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, FriendTargetList.Count));
          foreach (SkillTargetGetterMsgData _iter26 in FriendTargetList)
          {
            _iter26.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (EffectList != null && __isset.effectList) {
        field.Name = "effectList";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, EffectList.Count));
          foreach (SkillBattleEffectMsgData _iter27 in EffectList)
          {
            _iter27.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BattleMonsterSkillMsgAction(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",ExtraCDRound: ");
      sb.Append(ExtraCDRound);
      sb.Append(",ExtraCDDesc: ");
      sb.Append(ExtraCDDesc);
      sb.Append(",CostMp: ");
      sb.Append(CostMp);
      sb.Append(",EnemyTargetList: ");
      sb.Append(EnemyTargetList);
      sb.Append(",FriendTargetList: ");
      sb.Append(FriendTargetList);
      sb.Append(",EffectList: ");
      sb.Append(EffectList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
