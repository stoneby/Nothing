/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KXSGCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HeroInfo : TBase
  {
    private long _uuid;
    private int _templateId;
    private short _lvl;
    private sbyte _breakTimes;
    private Dictionary<int, int> _prop;
    private List<int> _skillId;
    private List<string> _equipUuid;
    private List<int> _equipTemplateId;
    private bool _bind;
    private long _createTime;

    public long Uuid
    {
      get
      {
        return _uuid;
      }
      set
      {
        __isset.uuid = true;
        this._uuid = value;
      }
    }

    public int TemplateId
    {
      get
      {
        return _templateId;
      }
      set
      {
        __isset.templateId = true;
        this._templateId = value;
      }
    }

    public short Lvl
    {
      get
      {
        return _lvl;
      }
      set
      {
        __isset.lvl = true;
        this._lvl = value;
      }
    }

    public sbyte BreakTimes
    {
      get
      {
        return _breakTimes;
      }
      set
      {
        __isset.breakTimes = true;
        this._breakTimes = value;
      }
    }

    public Dictionary<int, int> Prop
    {
      get
      {
        return _prop;
      }
      set
      {
        __isset.prop = true;
        this._prop = value;
      }
    }

    public List<int> SkillId
    {
      get
      {
        return _skillId;
      }
      set
      {
        __isset.skillId = true;
        this._skillId = value;
      }
    }

    public List<string> EquipUuid
    {
      get
      {
        return _equipUuid;
      }
      set
      {
        __isset.equipUuid = true;
        this._equipUuid = value;
      }
    }

    public List<int> EquipTemplateId
    {
      get
      {
        return _equipTemplateId;
      }
      set
      {
        __isset.equipTemplateId = true;
        this._equipTemplateId = value;
      }
    }

    public bool Bind
    {
      get
      {
        return _bind;
      }
      set
      {
        __isset.bind = true;
        this._bind = value;
      }
    }

    public long CreateTime
    {
      get
      {
        return _createTime;
      }
      set
      {
        __isset.createTime = true;
        this._createTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uuid;
      public bool templateId;
      public bool lvl;
      public bool breakTimes;
      public bool prop;
      public bool skillId;
      public bool equipUuid;
      public bool equipTemplateId;
      public bool bind;
      public bool createTime;
    }

    public HeroInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Uuid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              TemplateId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I16) {
              Lvl = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              BreakTimes = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Map) {
              {
                Prop = new Dictionary<int, int>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  int _key2;
                  int _val3;
                  _key2 = iprot.ReadI32();
                  _val3 = iprot.ReadI32();
                  Prop[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                SkillId = new List<int>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  int _elem6 = 0;
                  _elem6 = iprot.ReadI32();
                  SkillId.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                EquipUuid = new List<string>();
                TList _list7 = iprot.ReadListBegin();
                for( int _i8 = 0; _i8 < _list7.Count; ++_i8)
                {
                  string _elem9 = null;
                  _elem9 = iprot.ReadString();
                  EquipUuid.Add(_elem9);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                EquipTemplateId = new List<int>();
                TList _list10 = iprot.ReadListBegin();
                for( int _i11 = 0; _i11 < _list10.Count; ++_i11)
                {
                  int _elem12 = 0;
                  _elem12 = iprot.ReadI32();
                  EquipTemplateId.Add(_elem12);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              Bind = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              CreateTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HeroInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.uuid) {
        field.Name = "uuid";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Uuid);
        oprot.WriteFieldEnd();
      }
      if (__isset.templateId) {
        field.Name = "templateId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TemplateId);
        oprot.WriteFieldEnd();
      }
      if (__isset.lvl) {
        field.Name = "lvl";
        field.Type = TType.I16;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Lvl);
        oprot.WriteFieldEnd();
      }
      if (__isset.breakTimes) {
        field.Name = "breakTimes";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(BreakTimes);
        oprot.WriteFieldEnd();
      }
      if (Prop != null && __isset.prop) {
        field.Name = "prop";
        field.Type = TType.Map;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.I32, Prop.Count));
          foreach (int _iter13 in Prop.Keys)
          {
            oprot.WriteI32(_iter13);
            oprot.WriteI32(Prop[_iter13]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (SkillId != null && __isset.skillId) {
        field.Name = "skillId";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, SkillId.Count));
          foreach (int _iter14 in SkillId)
          {
            oprot.WriteI32(_iter14);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (EquipUuid != null && __isset.equipUuid) {
        field.Name = "equipUuid";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, EquipUuid.Count));
          foreach (string _iter15 in EquipUuid)
          {
            oprot.WriteString(_iter15);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (EquipTemplateId != null && __isset.equipTemplateId) {
        field.Name = "equipTemplateId";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, EquipTemplateId.Count));
          foreach (int _iter16 in EquipTemplateId)
          {
            oprot.WriteI32(_iter16);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.bind) {
        field.Name = "bind";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Bind);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTime) {
        field.Name = "createTime";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HeroInfo(");
      sb.Append("Uuid: ");
      sb.Append(Uuid);
      sb.Append(",TemplateId: ");
      sb.Append(TemplateId);
      sb.Append(",Lvl: ");
      sb.Append(Lvl);
      sb.Append(",BreakTimes: ");
      sb.Append(BreakTimes);
      sb.Append(",Prop: ");
      sb.Append(Prop);
      sb.Append(",SkillId: ");
      sb.Append(SkillId);
      sb.Append(",EquipUuid: ");
      sb.Append(EquipUuid);
      sb.Append(",EquipTemplateId: ");
      sb.Append(EquipTemplateId);
      sb.Append(",Bind: ");
      sb.Append(Bind);
      sb.Append(",CreateTime: ");
      sb.Append(CreateTime);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
