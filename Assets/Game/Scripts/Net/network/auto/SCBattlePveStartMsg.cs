/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KXSGCodec
{

  /// <summary>
  /// PVE战斗开始协议
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCBattlePveStartMsg : TBase
  {
    private long _uuid;
    private sbyte _battleType;
    private int _raidID;
    private List<KXSGCodec.BattleMsgHero> _fighterList;
    private List<int> _monsterGroup;
    private List<KXSGCodec.BattleMsgMonster> _monsterList;
    private List<KXSGCodec.BattleHeroSkillMsgAction> _heroSkillList;
    private List<KXSGCodec.BattleMonsterSkillMsgAction> _monsterSkillList;
    private List<KXSGCodec.BattleMonsterAIMsgAction> _monsterAIList;

    /// <summary>
    /// 战斗UUID
    /// </summary>
    public long Uuid
    {
      get
      {
        return _uuid;
      }
      set
      {
        __isset.uuid = true;
        this._uuid = value;
      }
    }

    /// <summary>
    /// 战斗类型
    /// </summary>
    public sbyte BattleType
    {
      get
      {
        return _battleType;
      }
      set
      {
        __isset.battleType = true;
        this._battleType = value;
      }
    }

    /// <summary>
    /// 副本ID
    /// </summary>
    public int RaidID
    {
      get
      {
        return _raidID;
      }
      set
      {
        __isset.raidID = true;
        this._raidID = value;
      }
    }

    /// <summary>
    /// 武将列表
    /// </summary>
    public List<KXSGCodec.BattleMsgHero> FighterList
    {
      get
      {
        return _fighterList;
      }
      set
      {
        __isset.fighterList = true;
        this._fighterList = value;
      }
    }

    /// <summary>
    /// 怪物分组
    /// </summary>
    public List<int> MonsterGroup
    {
      get
      {
        return _monsterGroup;
      }
      set
      {
        __isset.monsterGroup = true;
        this._monsterGroup = value;
      }
    }

    /// <summary>
    /// 怪物列表
    /// </summary>
    public List<KXSGCodec.BattleMsgMonster> MonsterList
    {
      get
      {
        return _monsterList;
      }
      set
      {
        __isset.monsterList = true;
        this._monsterList = value;
      }
    }

    /// <summary>
    /// 武将技能列表
    /// </summary>
    public List<KXSGCodec.BattleHeroSkillMsgAction> HeroSkillList
    {
      get
      {
        return _heroSkillList;
      }
      set
      {
        __isset.heroSkillList = true;
        this._heroSkillList = value;
      }
    }

    /// <summary>
    /// 怪物技能列表
    /// </summary>
    public List<KXSGCodec.BattleMonsterSkillMsgAction> MonsterSkillList
    {
      get
      {
        return _monsterSkillList;
      }
      set
      {
        __isset.monsterSkillList = true;
        this._monsterSkillList = value;
      }
    }

    /// <summary>
    /// 怪物AI列表
    /// </summary>
    public List<KXSGCodec.BattleMonsterAIMsgAction> MonsterAIList
    {
      get
      {
        return _monsterAIList;
      }
      set
      {
        __isset.monsterAIList = true;
        this._monsterAIList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uuid;
      public bool battleType;
      public bool raidID;
      public bool fighterList;
      public bool monsterGroup;
      public bool monsterList;
      public bool heroSkillList;
      public bool monsterSkillList;
      public bool monsterAIList;
    }

    public SCBattlePveStartMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Uuid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              BattleType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              RaidID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                FighterList = new List<KXSGCodec.BattleMsgHero>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  KXSGCodec.BattleMsgHero _elem2 = new KXSGCodec.BattleMsgHero();
                  _elem2 = new KXSGCodec.BattleMsgHero();
                  _elem2.Read(iprot);
                  FighterList.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                MonsterGroup = new List<int>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  int _elem5 = 0;
                  _elem5 = iprot.ReadI32();
                  MonsterGroup.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                MonsterList = new List<KXSGCodec.BattleMsgMonster>();
                TList _list6 = iprot.ReadListBegin();
                for( int _i7 = 0; _i7 < _list6.Count; ++_i7)
                {
                  KXSGCodec.BattleMsgMonster _elem8 = new KXSGCodec.BattleMsgMonster();
                  _elem8 = new KXSGCodec.BattleMsgMonster();
                  _elem8.Read(iprot);
                  MonsterList.Add(_elem8);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                HeroSkillList = new List<KXSGCodec.BattleHeroSkillMsgAction>();
                TList _list9 = iprot.ReadListBegin();
                for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                {
                  KXSGCodec.BattleHeroSkillMsgAction _elem11 = new KXSGCodec.BattleHeroSkillMsgAction();
                  _elem11 = new KXSGCodec.BattleHeroSkillMsgAction();
                  _elem11.Read(iprot);
                  HeroSkillList.Add(_elem11);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                MonsterSkillList = new List<KXSGCodec.BattleMonsterSkillMsgAction>();
                TList _list12 = iprot.ReadListBegin();
                for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                {
                  KXSGCodec.BattleMonsterSkillMsgAction _elem14 = new KXSGCodec.BattleMonsterSkillMsgAction();
                  _elem14 = new KXSGCodec.BattleMonsterSkillMsgAction();
                  _elem14.Read(iprot);
                  MonsterSkillList.Add(_elem14);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.List) {
              {
                MonsterAIList = new List<KXSGCodec.BattleMonsterAIMsgAction>();
                TList _list15 = iprot.ReadListBegin();
                for( int _i16 = 0; _i16 < _list15.Count; ++_i16)
                {
                  KXSGCodec.BattleMonsterAIMsgAction _elem17 = new KXSGCodec.BattleMonsterAIMsgAction();
                  _elem17 = new KXSGCodec.BattleMonsterAIMsgAction();
                  _elem17.Read(iprot);
                  MonsterAIList.Add(_elem17);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SCBattlePveStartMsg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.uuid) {
        field.Name = "uuid";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Uuid);
        oprot.WriteFieldEnd();
      }
      if (__isset.battleType) {
        field.Name = "battleType";
        field.Type = TType.Byte;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(BattleType);
        oprot.WriteFieldEnd();
      }
      if (__isset.raidID) {
        field.Name = "raidID";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RaidID);
        oprot.WriteFieldEnd();
      }
      if (FighterList != null && __isset.fighterList) {
        field.Name = "fighterList";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, FighterList.Count));
          foreach (KXSGCodec.BattleMsgHero _iter18 in FighterList)
          {
            _iter18.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (MonsterGroup != null && __isset.monsterGroup) {
        field.Name = "monsterGroup";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, MonsterGroup.Count));
          foreach (int _iter19 in MonsterGroup)
          {
            oprot.WriteI32(_iter19);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (MonsterList != null && __isset.monsterList) {
        field.Name = "monsterList";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, MonsterList.Count));
          foreach (KXSGCodec.BattleMsgMonster _iter20 in MonsterList)
          {
            _iter20.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (HeroSkillList != null && __isset.heroSkillList) {
        field.Name = "heroSkillList";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, HeroSkillList.Count));
          foreach (KXSGCodec.BattleHeroSkillMsgAction _iter21 in HeroSkillList)
          {
            _iter21.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (MonsterSkillList != null && __isset.monsterSkillList) {
        field.Name = "monsterSkillList";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, MonsterSkillList.Count));
          foreach (KXSGCodec.BattleMonsterSkillMsgAction _iter22 in MonsterSkillList)
          {
            _iter22.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (MonsterAIList != null && __isset.monsterAIList) {
        field.Name = "monsterAIList";
        field.Type = TType.List;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, MonsterAIList.Count));
          foreach (KXSGCodec.BattleMonsterAIMsgAction _iter23 in MonsterAIList)
          {
            _iter23.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SCBattlePveStartMsg(");
      sb.Append("Uuid: ");
      sb.Append(Uuid);
      sb.Append(",BattleType: ");
      sb.Append(BattleType);
      sb.Append(",RaidID: ");
      sb.Append(RaidID);
      sb.Append(",FighterList: ");
      sb.Append(FighterList);
      sb.Append(",MonsterGroup: ");
      sb.Append(MonsterGroup);
      sb.Append(",MonsterList: ");
      sb.Append(MonsterList);
      sb.Append(",HeroSkillList: ");
      sb.Append(HeroSkillList);
      sb.Append(",MonsterSkillList: ");
      sb.Append(MonsterSkillList);
      sb.Append(",MonsterAIList: ");
      sb.Append(MonsterAIList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
