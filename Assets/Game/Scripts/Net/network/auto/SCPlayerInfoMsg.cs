/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KXSGCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCPlayerInfoMsg : TBase
  {
    private long _uId;
    private string _uName;
    private short _heroId;
    private string _name;
    private long _cId;
    private short _lvl;
    private int _headIconId;
    private int _exp;
    private long _diamond;
    private long _gold;
    private int _spirit;
    private int _energy;
    private short _heroMax;
    private short _heroExtendTimes;
    private short _itemExtendTimes;
    private List<int> _teamList;
    private Dictionary<int, int> _teamProp;
    private bool _canSign;
    private bool _hasFinishedQuest;

    public long UId
    {
      get
      {
        return _uId;
      }
      set
      {
        __isset.uId = true;
        this._uId = value;
      }
    }

    public string UName
    {
      get
      {
        return _uName;
      }
      set
      {
        __isset.uName = true;
        this._uName = value;
      }
    }

    /// <summary>
    /// 对应武将id
    /// </summary>
    public short HeroId
    {
      get
      {
        return _heroId;
      }
      set
      {
        __isset.heroId = true;
        this._heroId = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    /// <summary>
    /// 角色id
    /// </summary>
    public long CId
    {
      get
      {
        return _cId;
      }
      set
      {
        __isset.cId = true;
        this._cId = value;
      }
    }

    public short Lvl
    {
      get
      {
        return _lvl;
      }
      set
      {
        __isset.lvl = true;
        this._lvl = value;
      }
    }

    public int HeadIconId
    {
      get
      {
        return _headIconId;
      }
      set
      {
        __isset.headIconId = true;
        this._headIconId = value;
      }
    }

    public int Exp
    {
      get
      {
        return _exp;
      }
      set
      {
        __isset.exp = true;
        this._exp = value;
      }
    }

    public long Diamond
    {
      get
      {
        return _diamond;
      }
      set
      {
        __isset.diamond = true;
        this._diamond = value;
      }
    }

    public long Gold
    {
      get
      {
        return _gold;
      }
      set
      {
        __isset.gold = true;
        this._gold = value;
      }
    }

    public int Spirit
    {
      get
      {
        return _spirit;
      }
      set
      {
        __isset.spirit = true;
        this._spirit = value;
      }
    }

    public int Energy
    {
      get
      {
        return _energy;
      }
      set
      {
        __isset.energy = true;
        this._energy = value;
      }
    }

    public short HeroMax
    {
      get
      {
        return _heroMax;
      }
      set
      {
        __isset.heroMax = true;
        this._heroMax = value;
      }
    }

    public short HeroExtendTimes
    {
      get
      {
        return _heroExtendTimes;
      }
      set
      {
        __isset.heroExtendTimes = true;
        this._heroExtendTimes = value;
      }
    }

    public short ItemExtendTimes
    {
      get
      {
        return _itemExtendTimes;
      }
      set
      {
        __isset.itemExtendTimes = true;
        this._itemExtendTimes = value;
      }
    }

    public List<int> TeamList
    {
      get
      {
        return _teamList;
      }
      set
      {
        __isset.teamList = true;
        this._teamList = value;
      }
    }

    public Dictionary<int, int> TeamProp
    {
      get
      {
        return _teamProp;
      }
      set
      {
        __isset.teamProp = true;
        this._teamProp = value;
      }
    }

    /// <summary>
    /// 今日是否可以签到
    /// </summary>
    public bool CanSign
    {
      get
      {
        return _canSign;
      }
      set
      {
        __isset.canSign = true;
        this._canSign = value;
      }
    }

    /// <summary>
    /// 是否有完成状态的任务
    /// </summary>
    public bool HasFinishedQuest
    {
      get
      {
        return _hasFinishedQuest;
      }
      set
      {
        __isset.hasFinishedQuest = true;
        this._hasFinishedQuest = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uId;
      public bool uName;
      public bool heroId;
      public bool name;
      public bool cId;
      public bool lvl;
      public bool headIconId;
      public bool exp;
      public bool diamond;
      public bool gold;
      public bool spirit;
      public bool energy;
      public bool heroMax;
      public bool heroExtendTimes;
      public bool itemExtendTimes;
      public bool teamList;
      public bool teamProp;
      public bool canSign;
      public bool hasFinishedQuest;
    }

    public SCPlayerInfoMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              UId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              UName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I16) {
              HeroId = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              CId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I16) {
              Lvl = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              HeadIconId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              Exp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              Diamond = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              Gold = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              Spirit = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              Energy = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I16) {
              HeroMax = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I16) {
              HeroExtendTimes = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I16) {
              ItemExtendTimes = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.List) {
              {
                TeamList = new List<int>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  int _elem6 = 0;
                  _elem6 = iprot.ReadI32();
                  TeamList.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.Map) {
              {
                TeamProp = new Dictionary<int, int>();
                TMap _map7 = iprot.ReadMapBegin();
                for( int _i8 = 0; _i8 < _map7.Count; ++_i8)
                {
                  int _key9;
                  int _val10;
                  _key9 = iprot.ReadI32();
                  _val10 = iprot.ReadI32();
                  TeamProp[_key9] = _val10;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.Bool) {
              CanSign = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.Bool) {
              HasFinishedQuest = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SCPlayerInfoMsg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.uId) {
        field.Name = "uId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UId);
        oprot.WriteFieldEnd();
      }
      if (UName != null && __isset.uName) {
        field.Name = "uName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UName);
        oprot.WriteFieldEnd();
      }
      if (__isset.heroId) {
        field.Name = "heroId";
        field.Type = TType.I16;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(HeroId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.cId) {
        field.Name = "cId";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CId);
        oprot.WriteFieldEnd();
      }
      if (__isset.lvl) {
        field.Name = "lvl";
        field.Type = TType.I16;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Lvl);
        oprot.WriteFieldEnd();
      }
      if (__isset.headIconId) {
        field.Name = "headIconId";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(HeadIconId);
        oprot.WriteFieldEnd();
      }
      if (__isset.exp) {
        field.Name = "exp";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Exp);
        oprot.WriteFieldEnd();
      }
      if (__isset.diamond) {
        field.Name = "diamond";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Diamond);
        oprot.WriteFieldEnd();
      }
      if (__isset.gold) {
        field.Name = "gold";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Gold);
        oprot.WriteFieldEnd();
      }
      if (__isset.spirit) {
        field.Name = "spirit";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Spirit);
        oprot.WriteFieldEnd();
      }
      if (__isset.energy) {
        field.Name = "energy";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Energy);
        oprot.WriteFieldEnd();
      }
      if (__isset.heroMax) {
        field.Name = "heroMax";
        field.Type = TType.I16;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(HeroMax);
        oprot.WriteFieldEnd();
      }
      if (__isset.heroExtendTimes) {
        field.Name = "heroExtendTimes";
        field.Type = TType.I16;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(HeroExtendTimes);
        oprot.WriteFieldEnd();
      }
      if (__isset.itemExtendTimes) {
        field.Name = "itemExtendTimes";
        field.Type = TType.I16;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(ItemExtendTimes);
        oprot.WriteFieldEnd();
      }
      if (TeamList != null && __isset.teamList) {
        field.Name = "teamList";
        field.Type = TType.List;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, TeamList.Count));
          foreach (int _iter11 in TeamList)
          {
            oprot.WriteI32(_iter11);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (TeamProp != null && __isset.teamProp) {
        field.Name = "teamProp";
        field.Type = TType.Map;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.I32, TeamProp.Count));
          foreach (int _iter12 in TeamProp.Keys)
          {
            oprot.WriteI32(_iter12);
            oprot.WriteI32(TeamProp[_iter12]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.canSign) {
        field.Name = "canSign";
        field.Type = TType.Bool;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanSign);
        oprot.WriteFieldEnd();
      }
      if (__isset.hasFinishedQuest) {
        field.Name = "hasFinishedQuest";
        field.Type = TType.Bool;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(HasFinishedQuest);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SCPlayerInfoMsg(");
      sb.Append("UId: ");
      sb.Append(UId);
      sb.Append(",UName: ");
      sb.Append(UName);
      sb.Append(",HeroId: ");
      sb.Append(HeroId);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",CId: ");
      sb.Append(CId);
      sb.Append(",Lvl: ");
      sb.Append(Lvl);
      sb.Append(",HeadIconId: ");
      sb.Append(HeadIconId);
      sb.Append(",Exp: ");
      sb.Append(Exp);
      sb.Append(",Diamond: ");
      sb.Append(Diamond);
      sb.Append(",Gold: ");
      sb.Append(Gold);
      sb.Append(",Spirit: ");
      sb.Append(Spirit);
      sb.Append(",Energy: ");
      sb.Append(Energy);
      sb.Append(",HeroMax: ");
      sb.Append(HeroMax);
      sb.Append(",HeroExtendTimes: ");
      sb.Append(HeroExtendTimes);
      sb.Append(",ItemExtendTimes: ");
      sb.Append(ItemExtendTimes);
      sb.Append(",TeamList: ");
      sb.Append(TeamList);
      sb.Append(",TeamProp: ");
      sb.Append(TeamProp);
      sb.Append(",CanSign: ");
      sb.Append(CanSign);
      sb.Append(",HasFinishedQuest: ");
      sb.Append(HasFinishedQuest);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
