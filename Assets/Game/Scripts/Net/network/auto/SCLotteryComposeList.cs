/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KXSGCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCLotteryComposeList : TBase
  {
    private int _superMaterialCount;
    private List<Dictionary<int, int>> _star5Material;
    private List<Dictionary<int, int>> _star4Material;

    public int SuperMaterialCount
    {
      get
      {
        return _superMaterialCount;
      }
      set
      {
        __isset.superMaterialCount = true;
        this._superMaterialCount = value;
      }
    }

    public List<Dictionary<int, int>> Star5Material
    {
      get
      {
        return _star5Material;
      }
      set
      {
        __isset.star5Material = true;
        this._star5Material = value;
      }
    }

    public List<Dictionary<int, int>> Star4Material
    {
      get
      {
        return _star4Material;
      }
      set
      {
        __isset.star4Material = true;
        this._star4Material = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool superMaterialCount;
      public bool star5Material;
      public bool star4Material;
    }

    public SCLotteryComposeList() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              SuperMaterialCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Star5Material = new List<Dictionary<int, int>>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  Dictionary<int, int> _elem10 = new Dictionary<int, int>();
                  {
                    _elem10 = new Dictionary<int, int>();
                    TMap _map11 = iprot.ReadMapBegin();
                    for( int _i12 = 0; _i12 < _map11.Count; ++_i12)
                    {
                      int _key13;
                      int _val14;
                      _key13 = iprot.ReadI32();
                      _val14 = iprot.ReadI32();
                      _elem10[_key13] = _val14;
                    }
                    iprot.ReadMapEnd();
                  }
                  Star5Material.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Star4Material = new List<Dictionary<int, int>>();
                TList _list15 = iprot.ReadListBegin();
                for( int _i16 = 0; _i16 < _list15.Count; ++_i16)
                {
                  Dictionary<int, int> _elem17 = new Dictionary<int, int>();
                  {
                    _elem17 = new Dictionary<int, int>();
                    TMap _map18 = iprot.ReadMapBegin();
                    for( int _i19 = 0; _i19 < _map18.Count; ++_i19)
                    {
                      int _key20;
                      int _val21;
                      _key20 = iprot.ReadI32();
                      _val21 = iprot.ReadI32();
                      _elem17[_key20] = _val21;
                    }
                    iprot.ReadMapEnd();
                  }
                  Star4Material.Add(_elem17);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SCLotteryComposeList");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.superMaterialCount) {
        field.Name = "superMaterialCount";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SuperMaterialCount);
        oprot.WriteFieldEnd();
      }
      if (Star5Material != null && __isset.star5Material) {
        field.Name = "star5Material";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Map, Star5Material.Count));
          foreach (Dictionary<int, int> _iter22 in Star5Material)
          {
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.I32, _iter22.Count));
              foreach (int _iter23 in _iter22.Keys)
              {
                oprot.WriteI32(_iter23);
                oprot.WriteI32(_iter22[_iter23]);
              }
              oprot.WriteMapEnd();
            }
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Star4Material != null && __isset.star4Material) {
        field.Name = "star4Material";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Map, Star4Material.Count));
          foreach (Dictionary<int, int> _iter24 in Star4Material)
          {
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.I32, _iter24.Count));
              foreach (int _iter25 in _iter24.Keys)
              {
                oprot.WriteI32(_iter25);
                oprot.WriteI32(_iter24[_iter25]);
              }
              oprot.WriteMapEnd();
            }
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SCLotteryComposeList(");
      sb.Append("SuperMaterialCount: ");
      sb.Append(SuperMaterialCount);
      sb.Append(",Star5Material: ");
      sb.Append(Star5Material);
      sb.Append(",Star4Material: ");
      sb.Append(Star4Material);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
