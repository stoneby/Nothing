/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KXSGCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FriendInfo : TBase
  {
    private long _friendUuid;
    private string _friendName;
    private int _friendLvl;
    private int _friendFamous;
    private List<HeroPropInfo> _heroProp;

    public long FriendUuid
    {
      get
      {
        return _friendUuid;
      }
      set
      {
        __isset.friendUuid = true;
        this._friendUuid = value;
      }
    }

    public string FriendName
    {
      get
      {
        return _friendName;
      }
      set
      {
        __isset.friendName = true;
        this._friendName = value;
      }
    }

    public int FriendLvl
    {
      get
      {
        return _friendLvl;
      }
      set
      {
        __isset.friendLvl = true;
        this._friendLvl = value;
      }
    }

    public int FriendFamous
    {
      get
      {
        return _friendFamous;
      }
      set
      {
        __isset.friendFamous = true;
        this._friendFamous = value;
      }
    }

    public List<HeroPropInfo> HeroProp
    {
      get
      {
        return _heroProp;
      }
      set
      {
        __isset.heroProp = true;
        this._heroProp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool friendUuid;
      public bool friendName;
      public bool friendLvl;
      public bool friendFamous;
      public bool heroProp;
    }

    public FriendInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              FriendUuid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              FriendName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              FriendLvl = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              FriendFamous = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                HeroProp = new List<HeroPropInfo>();
                TList _list13 = iprot.ReadListBegin();
                for( int _i14 = 0; _i14 < _list13.Count; ++_i14)
                {
                  HeroPropInfo _elem15 = new HeroPropInfo();
                  _elem15 = new HeroPropInfo();
                  _elem15.Read(iprot);
                  HeroProp.Add(_elem15);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("FriendInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.friendUuid) {
        field.Name = "friendUuid";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(FriendUuid);
        oprot.WriteFieldEnd();
      }
      if (FriendName != null && __isset.friendName) {
        field.Name = "friendName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FriendName);
        oprot.WriteFieldEnd();
      }
      if (__isset.friendLvl) {
        field.Name = "friendLvl";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FriendLvl);
        oprot.WriteFieldEnd();
      }
      if (__isset.friendFamous) {
        field.Name = "friendFamous";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FriendFamous);
        oprot.WriteFieldEnd();
      }
      if (HeroProp != null && __isset.heroProp) {
        field.Name = "heroProp";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, HeroProp.Count));
          foreach (HeroPropInfo _iter16 in HeroProp)
          {
            _iter16.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("FriendInfo(");
      sb.Append("FriendUuid: ");
      sb.Append(FriendUuid);
      sb.Append(",FriendName: ");
      sb.Append(FriendName);
      sb.Append(",FriendLvl: ");
      sb.Append(FriendLvl);
      sb.Append(",FriendFamous: ");
      sb.Append(FriendFamous);
      sb.Append(",HeroProp: ");
      sb.Append(HeroProp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
