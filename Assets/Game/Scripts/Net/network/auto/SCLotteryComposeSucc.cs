/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KXSGCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCLotteryComposeSucc : TBase
  {
    private long _uuid;
    private int _templateId;
    private int _superMaterialCount;
    private int _materialCount;

    public long Uuid
    {
      get
      {
        return _uuid;
      }
      set
      {
        __isset.uuid = true;
        this._uuid = value;
      }
    }

    public int TemplateId
    {
      get
      {
        return _templateId;
      }
      set
      {
        __isset.templateId = true;
        this._templateId = value;
      }
    }

    public int SuperMaterialCount
    {
      get
      {
        return _superMaterialCount;
      }
      set
      {
        __isset.superMaterialCount = true;
        this._superMaterialCount = value;
      }
    }

    public int MaterialCount
    {
      get
      {
        return _materialCount;
      }
      set
      {
        __isset.materialCount = true;
        this._materialCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uuid;
      public bool templateId;
      public bool superMaterialCount;
      public bool materialCount;
    }

    public SCLotteryComposeSucc() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Uuid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              TemplateId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              SuperMaterialCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              MaterialCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SCLotteryComposeSucc");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.uuid) {
        field.Name = "uuid";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Uuid);
        oprot.WriteFieldEnd();
      }
      if (__isset.templateId) {
        field.Name = "templateId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TemplateId);
        oprot.WriteFieldEnd();
      }
      if (__isset.superMaterialCount) {
        field.Name = "superMaterialCount";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SuperMaterialCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.materialCount) {
        field.Name = "materialCount";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaterialCount);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SCLotteryComposeSucc(");
      sb.Append("Uuid: ");
      sb.Append(Uuid);
      sb.Append(",TemplateId: ");
      sb.Append(TemplateId);
      sb.Append(",SuperMaterialCount: ");
      sb.Append(SuperMaterialCount);
      sb.Append(",MaterialCount: ");
      sb.Append(MaterialCount);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
