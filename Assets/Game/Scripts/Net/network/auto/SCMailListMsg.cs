/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KXSGCodec
{

  /// <summary>
  /// 邮件列表协议
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCMailListMsg : TBase
  {
    private int _listType;
    private sbyte _listVersion;
    private sbyte _containContent;
    private List<KXSGCodec.MailMsgInfo> _mailList;

    /// <summary>
    /// 0:刷新，1:更新
    /// </summary>
    public int ListType
    {
      get
      {
        return _listType;
      }
      set
      {
        __isset.listType = true;
        this._listType = value;
      }
    }

    /// <summary>
    /// 当前邮件列表版本（-1为无版本号更新，只更新内容）
    /// </summary>
    public sbyte ListVersion
    {
      get
      {
        return _listVersion;
      }
      set
      {
        __isset.listVersion = true;
        this._listVersion = value;
      }
    }

    /// <summary>
    /// 是否包含正文
    /// </summary>
    public sbyte ContainContent
    {
      get
      {
        return _containContent;
      }
      set
      {
        __isset.containContent = true;
        this._containContent = value;
      }
    }

    /// <summary>
    /// 邮件列表
    /// </summary>
    public List<KXSGCodec.MailMsgInfo> MailList
    {
      get
      {
        return _mailList;
      }
      set
      {
        __isset.mailList = true;
        this._mailList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool listType;
      public bool listVersion;
      public bool containContent;
      public bool mailList;
    }

    public SCMailListMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ListType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              ListVersion = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              ContainContent = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                MailList = new List<KXSGCodec.MailMsgInfo>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  KXSGCodec.MailMsgInfo _elem2 = new KXSGCodec.MailMsgInfo();
                  _elem2 = new KXSGCodec.MailMsgInfo();
                  _elem2.Read(iprot);
                  MailList.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SCMailListMsg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.listType) {
        field.Name = "listType";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ListType);
        oprot.WriteFieldEnd();
      }
      if (__isset.listVersion) {
        field.Name = "listVersion";
        field.Type = TType.Byte;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ListVersion);
        oprot.WriteFieldEnd();
      }
      if (__isset.containContent) {
        field.Name = "containContent";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ContainContent);
        oprot.WriteFieldEnd();
      }
      if (MailList != null && __isset.mailList) {
        field.Name = "mailList";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, MailList.Count));
          foreach (KXSGCodec.MailMsgInfo _iter3 in MailList)
          {
            _iter3.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SCMailListMsg(");
      sb.Append("ListType: ");
      sb.Append(ListType);
      sb.Append(",ListVersion: ");
      sb.Append(ListVersion);
      sb.Append(",ContainContent: ");
      sb.Append(ContainContent);
      sb.Append(",MailList: ");
      sb.Append(MailList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
