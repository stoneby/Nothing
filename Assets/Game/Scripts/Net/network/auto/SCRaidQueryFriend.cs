/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KXSGCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCRaidQueryFriend : TBase
  {
    private List<KXSGCodec.FriendInfo> _battleFriend;
    private List<KXSGCodec.FriendInfo> _battleGuest;

    public List<KXSGCodec.FriendInfo> BattleFriend
    {
      get
      {
        return _battleFriend;
      }
      set
      {
        __isset.battleFriend = true;
        this._battleFriend = value;
      }
    }

    public List<KXSGCodec.FriendInfo> BattleGuest
    {
      get
      {
        return _battleGuest;
      }
      set
      {
        __isset.battleGuest = true;
        this._battleGuest = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool battleFriend;
      public bool battleGuest;
    }

    public SCRaidQueryFriend() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                BattleFriend = new List<KXSGCodec.FriendInfo>();
                TList _list21 = iprot.ReadListBegin();
                for( int _i22 = 0; _i22 < _list21.Count; ++_i22)
                {
                  KXSGCodec.FriendInfo _elem23 = new KXSGCodec.FriendInfo();
                  _elem23 = new KXSGCodec.FriendInfo();
                  _elem23.Read(iprot);
                  BattleFriend.Add(_elem23);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                BattleGuest = new List<KXSGCodec.FriendInfo>();
                TList _list24 = iprot.ReadListBegin();
                for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                {
                  KXSGCodec.FriendInfo _elem26 = new KXSGCodec.FriendInfo();
                  _elem26 = new KXSGCodec.FriendInfo();
                  _elem26.Read(iprot);
                  BattleGuest.Add(_elem26);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SCRaidQueryFriend");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (BattleFriend != null && __isset.battleFriend) {
        field.Name = "battleFriend";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, BattleFriend.Count));
          foreach (KXSGCodec.FriendInfo _iter27 in BattleFriend)
          {
            _iter27.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (BattleGuest != null && __isset.battleGuest) {
        field.Name = "battleGuest";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, BattleGuest.Count));
          foreach (KXSGCodec.FriendInfo _iter28 in BattleGuest)
          {
            _iter28.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SCRaidQueryFriend(");
      sb.Append("BattleFriend: ");
      sb.Append(BattleFriend);
      sb.Append(",BattleGuest: ");
      sb.Append(BattleGuest);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
