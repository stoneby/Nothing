/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KXSGCodec
{

  /// <summary>
  /// 英雄武将信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BattleMsgHero : TBase
  {
    private int _index;
    private int _templateId;
    private int _heroType;
    private Dictionary<int, int> _fighteProp;
    private Dictionary<int, int> _otherProp;
    private int _activeSkillId;
    private List<int> _allSkill;

    /// <summary>
    /// 武将位置Index
    /// </summary>
    public int Index
    {
      get
      {
        return _index;
      }
      set
      {
        __isset.index = true;
        this._index = value;
      }
    }

    /// <summary>
    /// 武将模板ID
    /// </summary>
    public int TemplateId
    {
      get
      {
        return _templateId;
      }
      set
      {
        __isset.templateId = true;
        this._templateId = value;
      }
    }

    /// <summary>
    /// 武将类型，1：普通武将，2：好友武将，3：guest武将
    /// </summary>
    public int HeroType
    {
      get
      {
        return _heroType;
      }
      set
      {
        __isset.heroType = true;
        this._heroType = value;
      }
    }

    /// <summary>
    /// 战斗属性map，hp,sp等
    /// </summary>
    public Dictionary<int, int> FighteProp
    {
      get
      {
        return _fighteProp;
      }
      set
      {
        __isset.fighteProp = true;
        this._fighteProp = value;
      }
    }

    /// <summary>
    /// 额外属性，比如怪物掉落显示
    /// </summary>
    public Dictionary<int, int> OtherProp
    {
      get
      {
        return _otherProp;
      }
      set
      {
        __isset.otherProp = true;
        this._otherProp = value;
      }
    }

    /// <summary>
    /// 主动技能ID
    /// </summary>
    public int ActiveSkillId
    {
      get
      {
        return _activeSkillId;
      }
      set
      {
        __isset.activeSkillId = true;
        this._activeSkillId = value;
      }
    }

    /// <summary>
    /// 全部技能
    /// </summary>
    public List<int> AllSkill
    {
      get
      {
        return _allSkill;
      }
      set
      {
        __isset.allSkill = true;
        this._allSkill = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool index;
      public bool templateId;
      public bool heroType;
      public bool fighteProp;
      public bool otherProp;
      public bool activeSkillId;
      public bool allSkill;
    }

    public BattleMsgHero() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Index = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              TemplateId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              HeroType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                FighteProp = new Dictionary<int, int>();
                TMap _map54 = iprot.ReadMapBegin();
                for( int _i55 = 0; _i55 < _map54.Count; ++_i55)
                {
                  int _key56;
                  int _val57;
                  _key56 = iprot.ReadI32();
                  _val57 = iprot.ReadI32();
                  FighteProp[_key56] = _val57;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Map) {
              {
                OtherProp = new Dictionary<int, int>();
                TMap _map58 = iprot.ReadMapBegin();
                for( int _i59 = 0; _i59 < _map58.Count; ++_i59)
                {
                  int _key60;
                  int _val61;
                  _key60 = iprot.ReadI32();
                  _val61 = iprot.ReadI32();
                  OtherProp[_key60] = _val61;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              ActiveSkillId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                AllSkill = new List<int>();
                TList _list62 = iprot.ReadListBegin();
                for( int _i63 = 0; _i63 < _list62.Count; ++_i63)
                {
                  int _elem64 = 0;
                  _elem64 = iprot.ReadI32();
                  AllSkill.Add(_elem64);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BattleMsgHero");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.index) {
        field.Name = "index";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Index);
        oprot.WriteFieldEnd();
      }
      if (__isset.templateId) {
        field.Name = "templateId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TemplateId);
        oprot.WriteFieldEnd();
      }
      if (__isset.heroType) {
        field.Name = "heroType";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(HeroType);
        oprot.WriteFieldEnd();
      }
      if (FighteProp != null && __isset.fighteProp) {
        field.Name = "fighteProp";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.I32, FighteProp.Count));
          foreach (int _iter65 in FighteProp.Keys)
          {
            oprot.WriteI32(_iter65);
            oprot.WriteI32(FighteProp[_iter65]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (OtherProp != null && __isset.otherProp) {
        field.Name = "otherProp";
        field.Type = TType.Map;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.I32, OtherProp.Count));
          foreach (int _iter66 in OtherProp.Keys)
          {
            oprot.WriteI32(_iter66);
            oprot.WriteI32(OtherProp[_iter66]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.activeSkillId) {
        field.Name = "activeSkillId";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ActiveSkillId);
        oprot.WriteFieldEnd();
      }
      if (AllSkill != null && __isset.allSkill) {
        field.Name = "allSkill";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, AllSkill.Count));
          foreach (int _iter67 in AllSkill)
          {
            oprot.WriteI32(_iter67);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BattleMsgHero(");
      sb.Append("Index: ");
      sb.Append(Index);
      sb.Append(",TemplateId: ");
      sb.Append(TemplateId);
      sb.Append(",HeroType: ");
      sb.Append(HeroType);
      sb.Append(",FighteProp: ");
      sb.Append(FighteProp);
      sb.Append(",OtherProp: ");
      sb.Append(OtherProp);
      sb.Append(",ActiveSkillId: ");
      sb.Append(ActiveSkillId);
      sb.Append(",AllSkill: ");
      sb.Append(AllSkill);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
