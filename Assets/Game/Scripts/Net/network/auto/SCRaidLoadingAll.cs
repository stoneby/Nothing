/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KXSGCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCRaidLoadingAll : TBase
  {
    private List<KXSGCodec.RaidInfo> _raidInfoNormal;
    private List<KXSGCodec.RaidInfo> _raidInfoElite;
    private List<KXSGCodec.RaidInfo> _raidInfoMaster;
    private long _dailyRecordTime;
    private Dictionary<int, sbyte> _todayFinishTimes;
    private List<int> _hasAwardInfo;

    public List<KXSGCodec.RaidInfo> RaidInfoNormal
    {
      get
      {
        return _raidInfoNormal;
      }
      set
      {
        __isset.raidInfoNormal = true;
        this._raidInfoNormal = value;
      }
    }

    public List<KXSGCodec.RaidInfo> RaidInfoElite
    {
      get
      {
        return _raidInfoElite;
      }
      set
      {
        __isset.raidInfoElite = true;
        this._raidInfoElite = value;
      }
    }

    public List<KXSGCodec.RaidInfo> RaidInfoMaster
    {
      get
      {
        return _raidInfoMaster;
      }
      set
      {
        __isset.raidInfoMaster = true;
        this._raidInfoMaster = value;
      }
    }

    public long DailyRecordTime
    {
      get
      {
        return _dailyRecordTime;
      }
      set
      {
        __isset.dailyRecordTime = true;
        this._dailyRecordTime = value;
      }
    }

    public Dictionary<int, sbyte> TodayFinishTimes
    {
      get
      {
        return _todayFinishTimes;
      }
      set
      {
        __isset.todayFinishTimes = true;
        this._todayFinishTimes = value;
      }
    }

    public List<int> HasAwardInfo
    {
      get
      {
        return _hasAwardInfo;
      }
      set
      {
        __isset.hasAwardInfo = true;
        this._hasAwardInfo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool raidInfoNormal;
      public bool raidInfoElite;
      public bool raidInfoMaster;
      public bool dailyRecordTime;
      public bool todayFinishTimes;
      public bool hasAwardInfo;
    }

    public SCRaidLoadingAll() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                RaidInfoNormal = new List<KXSGCodec.RaidInfo>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  KXSGCodec.RaidInfo _elem2 = new KXSGCodec.RaidInfo();
                  _elem2 = new KXSGCodec.RaidInfo();
                  _elem2.Read(iprot);
                  RaidInfoNormal.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                RaidInfoElite = new List<KXSGCodec.RaidInfo>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  KXSGCodec.RaidInfo _elem5 = new KXSGCodec.RaidInfo();
                  _elem5 = new KXSGCodec.RaidInfo();
                  _elem5.Read(iprot);
                  RaidInfoElite.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                RaidInfoMaster = new List<KXSGCodec.RaidInfo>();
                TList _list6 = iprot.ReadListBegin();
                for( int _i7 = 0; _i7 < _list6.Count; ++_i7)
                {
                  KXSGCodec.RaidInfo _elem8 = new KXSGCodec.RaidInfo();
                  _elem8 = new KXSGCodec.RaidInfo();
                  _elem8.Read(iprot);
                  RaidInfoMaster.Add(_elem8);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              DailyRecordTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Map) {
              {
                TodayFinishTimes = new Dictionary<int, sbyte>();
                TMap _map9 = iprot.ReadMapBegin();
                for( int _i10 = 0; _i10 < _map9.Count; ++_i10)
                {
                  int _key11;
                  sbyte _val12;
                  _key11 = iprot.ReadI32();
                  _val12 = iprot.ReadByte();
                  TodayFinishTimes[_key11] = _val12;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                HasAwardInfo = new List<int>();
                TList _list13 = iprot.ReadListBegin();
                for( int _i14 = 0; _i14 < _list13.Count; ++_i14)
                {
                  int _elem15 = 0;
                  _elem15 = iprot.ReadI32();
                  HasAwardInfo.Add(_elem15);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SCRaidLoadingAll");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (RaidInfoNormal != null && __isset.raidInfoNormal) {
        field.Name = "raidInfoNormal";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, RaidInfoNormal.Count));
          foreach (KXSGCodec.RaidInfo _iter16 in RaidInfoNormal)
          {
            _iter16.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (RaidInfoElite != null && __isset.raidInfoElite) {
        field.Name = "raidInfoElite";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, RaidInfoElite.Count));
          foreach (KXSGCodec.RaidInfo _iter17 in RaidInfoElite)
          {
            _iter17.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (RaidInfoMaster != null && __isset.raidInfoMaster) {
        field.Name = "raidInfoMaster";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, RaidInfoMaster.Count));
          foreach (KXSGCodec.RaidInfo _iter18 in RaidInfoMaster)
          {
            _iter18.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.dailyRecordTime) {
        field.Name = "dailyRecordTime";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DailyRecordTime);
        oprot.WriteFieldEnd();
      }
      if (TodayFinishTimes != null && __isset.todayFinishTimes) {
        field.Name = "todayFinishTimes";
        field.Type = TType.Map;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Byte, TodayFinishTimes.Count));
          foreach (int _iter19 in TodayFinishTimes.Keys)
          {
            oprot.WriteI32(_iter19);
            oprot.WriteByte(TodayFinishTimes[_iter19]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (HasAwardInfo != null && __isset.hasAwardInfo) {
        field.Name = "hasAwardInfo";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, HasAwardInfo.Count));
          foreach (int _iter20 in HasAwardInfo)
          {
            oprot.WriteI32(_iter20);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SCRaidLoadingAll(");
      sb.Append("RaidInfoNormal: ");
      sb.Append(RaidInfoNormal);
      sb.Append(",RaidInfoElite: ");
      sb.Append(RaidInfoElite);
      sb.Append(",RaidInfoMaster: ");
      sb.Append(RaidInfoMaster);
      sb.Append(",DailyRecordTime: ");
      sb.Append(DailyRecordTime);
      sb.Append(",TodayFinishTimes: ");
      sb.Append(TodayFinishTimes);
      sb.Append(",HasAwardInfo: ");
      sb.Append(HasAwardInfo);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
