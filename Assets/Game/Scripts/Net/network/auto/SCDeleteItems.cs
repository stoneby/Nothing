/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KXSGCodec
{

  /// <summary>
  /// 删除道具
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCDeleteItems : TBase
  {
    private sbyte _bagType;
    private List<short> _deleteIndexes;

    /// <summary>
    /// 背包类型 0-主背包 1-回购背包
    /// </summary>
    public sbyte BagType
    {
      get
      {
        return _bagType;
      }
      set
      {
        __isset.bagType = true;
        this._bagType = value;
      }
    }

    /// <summary>
    /// 删除道具对应的背包索引
    /// </summary>
    public List<short> DeleteIndexes
    {
      get
      {
        return _deleteIndexes;
      }
      set
      {
        __isset.deleteIndexes = true;
        this._deleteIndexes = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool bagType;
      public bool deleteIndexes;
    }

    public SCDeleteItems() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              BagType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                DeleteIndexes = new List<short>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  short _elem6 = 0;
                  _elem6 = iprot.ReadI16();
                  DeleteIndexes.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SCDeleteItems");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.bagType) {
        field.Name = "bagType";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(BagType);
        oprot.WriteFieldEnd();
      }
      if (DeleteIndexes != null && __isset.deleteIndexes) {
        field.Name = "deleteIndexes";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I16, DeleteIndexes.Count));
          foreach (short _iter7 in DeleteIndexes)
          {
            oprot.WriteI16(_iter7);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SCDeleteItems(");
      sb.Append("BagType: ");
      sb.Append(BagType);
      sb.Append(",DeleteIndexes: ");
      sb.Append(DeleteIndexes);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
