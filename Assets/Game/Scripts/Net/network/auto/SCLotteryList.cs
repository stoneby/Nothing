/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KXSGCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCLotteryList : TBase
  {
    private List<KXSGCodec.LotteryInfo> _listLotteryHeroInfo;
    private List<KXSGCodec.LotteryInfo> _listLotteryItemInfo;
    private long _lastFreeLotteryTime;
    private int _get4StarHeroRestTimes;
    private int _lotteryHeroCost;
    private int _lotteryItemCost;
    private int _famous;
    private int _superChip;

    /// <summary>
    /// 武将抽卡列表
    /// </summary>
    public List<KXSGCodec.LotteryInfo> ListLotteryHeroInfo
    {
      get
      {
        return _listLotteryHeroInfo;
      }
      set
      {
        __isset.listLotteryHeroInfo = true;
        this._listLotteryHeroInfo = value;
      }
    }

    /// <summary>
    /// 道具抽卡列表
    /// </summary>
    public List<KXSGCodec.LotteryInfo> ListLotteryItemInfo
    {
      get
      {
        return _listLotteryItemInfo;
      }
      set
      {
        __isset.listLotteryItemInfo = true;
        this._listLotteryItemInfo = value;
      }
    }

    /// <summary>
    /// 最近一次免费抽卡时间
    /// </summary>
    public long LastFreeLotteryTime
    {
      get
      {
        return _lastFreeLotteryTime;
      }
      set
      {
        __isset.lastFreeLotteryTime = true;
        this._lastFreeLotteryTime = value;
      }
    }

    /// <summary>
    /// 获得4星武将剩余抽卡次数
    /// </summary>
    public int Get4StarHeroRestTimes
    {
      get
      {
        return _get4StarHeroRestTimes;
      }
      set
      {
        __isset.get4StarHeroRestTimes = true;
        this._get4StarHeroRestTimes = value;
      }
    }

    /// <summary>
    /// 单次抽武将消耗
    /// </summary>
    public int LotteryHeroCost
    {
      get
      {
        return _lotteryHeroCost;
      }
      set
      {
        __isset.lotteryHeroCost = true;
        this._lotteryHeroCost = value;
      }
    }

    /// <summary>
    /// 单次抽道具消耗
    /// </summary>
    public int LotteryItemCost
    {
      get
      {
        return _lotteryItemCost;
      }
      set
      {
        __isset.lotteryItemCost = true;
        this._lotteryItemCost = value;
      }
    }

    /// <summary>
    /// 名气值
    /// </summary>
    public int Famous
    {
      get
      {
        return _famous;
      }
      set
      {
        __isset.famous = true;
        this._famous = value;
      }
    }

    /// <summary>
    /// 万能碎片
    /// </summary>
    public int SuperChip
    {
      get
      {
        return _superChip;
      }
      set
      {
        __isset.superChip = true;
        this._superChip = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool listLotteryHeroInfo;
      public bool listLotteryItemInfo;
      public bool lastFreeLotteryTime;
      public bool get4StarHeroRestTimes;
      public bool lotteryHeroCost;
      public bool lotteryItemCost;
      public bool famous;
      public bool superChip;
    }

    public SCLotteryList() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                ListLotteryHeroInfo = new List<KXSGCodec.LotteryInfo>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  KXSGCodec.LotteryInfo _elem2 = new KXSGCodec.LotteryInfo();
                  _elem2 = new KXSGCodec.LotteryInfo();
                  _elem2.Read(iprot);
                  ListLotteryHeroInfo.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                ListLotteryItemInfo = new List<KXSGCodec.LotteryInfo>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  KXSGCodec.LotteryInfo _elem5 = new KXSGCodec.LotteryInfo();
                  _elem5 = new KXSGCodec.LotteryInfo();
                  _elem5.Read(iprot);
                  ListLotteryItemInfo.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              LastFreeLotteryTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Get4StarHeroRestTimes = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              LotteryHeroCost = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              LotteryItemCost = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Famous = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              SuperChip = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SCLotteryList");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ListLotteryHeroInfo != null && __isset.listLotteryHeroInfo) {
        field.Name = "listLotteryHeroInfo";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ListLotteryHeroInfo.Count));
          foreach (KXSGCodec.LotteryInfo _iter6 in ListLotteryHeroInfo)
          {
            _iter6.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ListLotteryItemInfo != null && __isset.listLotteryItemInfo) {
        field.Name = "listLotteryItemInfo";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ListLotteryItemInfo.Count));
          foreach (KXSGCodec.LotteryInfo _iter7 in ListLotteryItemInfo)
          {
            _iter7.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.lastFreeLotteryTime) {
        field.Name = "lastFreeLotteryTime";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastFreeLotteryTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.get4StarHeroRestTimes) {
        field.Name = "get4StarHeroRestTimes";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Get4StarHeroRestTimes);
        oprot.WriteFieldEnd();
      }
      if (__isset.lotteryHeroCost) {
        field.Name = "lotteryHeroCost";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LotteryHeroCost);
        oprot.WriteFieldEnd();
      }
      if (__isset.lotteryItemCost) {
        field.Name = "lotteryItemCost";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LotteryItemCost);
        oprot.WriteFieldEnd();
      }
      if (__isset.famous) {
        field.Name = "famous";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Famous);
        oprot.WriteFieldEnd();
      }
      if (__isset.superChip) {
        field.Name = "superChip";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SuperChip);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SCLotteryList(");
      sb.Append("ListLotteryHeroInfo: ");
      sb.Append(ListLotteryHeroInfo);
      sb.Append(",ListLotteryItemInfo: ");
      sb.Append(ListLotteryItemInfo);
      sb.Append(",LastFreeLotteryTime: ");
      sb.Append(LastFreeLotteryTime);
      sb.Append(",Get4StarHeroRestTimes: ");
      sb.Append(Get4StarHeroRestTimes);
      sb.Append(",LotteryHeroCost: ");
      sb.Append(LotteryHeroCost);
      sb.Append(",LotteryItemCost: ");
      sb.Append(LotteryItemCost);
      sb.Append(",Famous: ");
      sb.Append(Famous);
      sb.Append(",SuperChip: ");
      sb.Append(SuperChip);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
