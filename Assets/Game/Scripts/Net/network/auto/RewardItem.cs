/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KXSGCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RewardItem : TBase
  {
    private sbyte _rewardType;
    private long _uuid;
    private int _templateId;
    private Dictionary<int, int> _prop;

    public sbyte RewardType
    {
      get
      {
        return _rewardType;
      }
      set
      {
        __isset.rewardType = true;
        this._rewardType = value;
      }
    }

    public long Uuid
    {
      get
      {
        return _uuid;
      }
      set
      {
        __isset.uuid = true;
        this._uuid = value;
      }
    }

    public int TemplateId
    {
      get
      {
        return _templateId;
      }
      set
      {
        __isset.templateId = true;
        this._templateId = value;
      }
    }

    public Dictionary<int, int> Prop
    {
      get
      {
        return _prop;
      }
      set
      {
        __isset.prop = true;
        this._prop = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool rewardType;
      public bool uuid;
      public bool templateId;
      public bool prop;
    }

    public RewardItem() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              RewardType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              Uuid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              TemplateId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                Prop = new Dictionary<int, int>();
                TMap _map17 = iprot.ReadMapBegin();
                for( int _i18 = 0; _i18 < _map17.Count; ++_i18)
                {
                  int _key19;
                  int _val20;
                  _key19 = iprot.ReadI32();
                  _val20 = iprot.ReadI32();
                  Prop[_key19] = _val20;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RewardItem");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.rewardType) {
        field.Name = "rewardType";
        field.Type = TType.Byte;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(RewardType);
        oprot.WriteFieldEnd();
      }
      if (__isset.uuid) {
        field.Name = "uuid";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Uuid);
        oprot.WriteFieldEnd();
      }
      if (__isset.templateId) {
        field.Name = "templateId";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TemplateId);
        oprot.WriteFieldEnd();
      }
      if (Prop != null && __isset.prop) {
        field.Name = "prop";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.I32, Prop.Count));
          foreach (int _iter21 in Prop.Keys)
          {
            oprot.WriteI32(_iter21);
            oprot.WriteI32(Prop[_iter21]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("RewardItem(");
      sb.Append("RewardType: ");
      sb.Append(RewardType);
      sb.Append(",Uuid: ");
      sb.Append(Uuid);
      sb.Append(",TemplateId: ");
      sb.Append(TemplateId);
      sb.Append(",Prop: ");
      sb.Append(Prop);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
