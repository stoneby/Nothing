/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KXSGCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCRaidReward : TBase
  {
    private int _exp;
    private Dictionary<sbyte, int> _money;
    private List<KXSGCodec.RewardItem> _rewardItem;
    private sbyte _star;

    public int Exp
    {
      get
      {
        return _exp;
      }
      set
      {
        __isset.exp = true;
        this._exp = value;
      }
    }

    public Dictionary<sbyte, int> Money
    {
      get
      {
        return _money;
      }
      set
      {
        __isset.money = true;
        this._money = value;
      }
    }

    public List<KXSGCodec.RewardItem> RewardItem
    {
      get
      {
        return _rewardItem;
      }
      set
      {
        __isset.rewardItem = true;
        this._rewardItem = value;
      }
    }

    public sbyte Star
    {
      get
      {
        return _star;
      }
      set
      {
        __isset.star = true;
        this._star = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool exp;
      public bool money;
      public bool rewardItem;
      public bool star;
    }

    public SCRaidReward() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Exp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                Money = new Dictionary<sbyte, int>();
                TMap _map29 = iprot.ReadMapBegin();
                for( int _i30 = 0; _i30 < _map29.Count; ++_i30)
                {
                  sbyte _key31;
                  int _val32;
                  _key31 = iprot.ReadByte();
                  _val32 = iprot.ReadI32();
                  Money[_key31] = _val32;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                RewardItem = new List<KXSGCodec.RewardItem>();
                TList _list33 = iprot.ReadListBegin();
                for( int _i34 = 0; _i34 < _list33.Count; ++_i34)
                {
                  KXSGCodec.RewardItem _elem35 = new KXSGCodec.RewardItem();
                  _elem35 = new KXSGCodec.RewardItem();
                  _elem35.Read(iprot);
                  RewardItem.Add(_elem35);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              Star = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SCRaidReward");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.exp) {
        field.Name = "exp";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Exp);
        oprot.WriteFieldEnd();
      }
      if (Money != null && __isset.money) {
        field.Name = "money";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.I32, Money.Count));
          foreach (sbyte _iter36 in Money.Keys)
          {
            oprot.WriteByte(_iter36);
            oprot.WriteI32(Money[_iter36]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (RewardItem != null && __isset.rewardItem) {
        field.Name = "rewardItem";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, RewardItem.Count));
          foreach (KXSGCodec.RewardItem _iter37 in RewardItem)
          {
            _iter37.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.star) {
        field.Name = "star";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Star);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SCRaidReward(");
      sb.Append("Exp: ");
      sb.Append(Exp);
      sb.Append(",Money: ");
      sb.Append(Money);
      sb.Append(",RewardItem: ");
      sb.Append(RewardItem);
      sb.Append(",Star: ");
      sb.Append(Star);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
