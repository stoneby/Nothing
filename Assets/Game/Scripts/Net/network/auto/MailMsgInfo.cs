/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KXSGCodec
{

  /// <summary>
  /// 邮件信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MailMsgInfo : TBase
  {
    private int _uuid;
    private int _state;
    private int _version;
    private long _createTime;
    private long _deadline;
    private string _title;
    private string _sender;
    private List<MailAttachment> _attachments;
    private string _content;

    /// <summary>
    /// 邮件ID
    /// </summary>
    public int Uuid
    {
      get
      {
        return _uuid;
      }
      set
      {
        __isset.uuid = true;
        this._uuid = value;
      }
    }

    /// <summary>
    /// 邮件状态
    /// </summary>
    public int State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.state = true;
        this._state = value;
      }
    }

    /// <summary>
    /// 版本号
    /// </summary>
    public int Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }

    /// <summary>
    /// 创建时间
    /// </summary>
    public long CreateTime
    {
      get
      {
        return _createTime;
      }
      set
      {
        __isset.createTime = true;
        this._createTime = value;
      }
    }

    /// <summary>
    /// 过期时间
    /// </summary>
    public long Deadline
    {
      get
      {
        return _deadline;
      }
      set
      {
        __isset.deadline = true;
        this._deadline = value;
      }
    }

    /// <summary>
    /// 邮件标题
    /// </summary>
    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    /// <summary>
    /// 发件人
    /// </summary>
    public string Sender
    {
      get
      {
        return _sender;
      }
      set
      {
        __isset.sender = true;
        this._sender = value;
      }
    }

    /// <summary>
    /// 邮件附件列表
    /// </summary>
    public List<MailAttachment> Attachments
    {
      get
      {
        return _attachments;
      }
      set
      {
        __isset.attachments = true;
        this._attachments = value;
      }
    }

    /// <summary>
    /// 邮件正文，可能是空
    /// </summary>
    public string Content
    {
      get
      {
        return _content;
      }
      set
      {
        __isset.content = true;
        this._content = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uuid;
      public bool state;
      public bool version;
      public bool createTime;
      public bool deadline;
      public bool title;
      public bool sender;
      public bool attachments;
      public bool content;
    }

    public MailMsgInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Uuid = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              State = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Version = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              CreateTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              Deadline = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Sender = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                Attachments = new List<MailAttachment>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  MailAttachment _elem2 = new MailAttachment();
                  _elem2 = new MailAttachment();
                  _elem2.Read(iprot);
                  Attachments.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Content = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MailMsgInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.uuid) {
        field.Name = "uuid";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Uuid);
        oprot.WriteFieldEnd();
      }
      if (__isset.state) {
        field.Name = "state";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(State);
        oprot.WriteFieldEnd();
      }
      if (__isset.version) {
        field.Name = "version";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Version);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTime) {
        field.Name = "createTime";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.deadline) {
        field.Name = "deadline";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Deadline);
        oprot.WriteFieldEnd();
      }
      if (Title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      if (Sender != null && __isset.sender) {
        field.Name = "sender";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Sender);
        oprot.WriteFieldEnd();
      }
      if (Attachments != null && __isset.attachments) {
        field.Name = "attachments";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Attachments.Count));
          foreach (MailAttachment _iter3 in Attachments)
          {
            _iter3.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Content != null && __isset.content) {
        field.Name = "content";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Content);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("MailMsgInfo(");
      sb.Append("Uuid: ");
      sb.Append(Uuid);
      sb.Append(",State: ");
      sb.Append(State);
      sb.Append(",Version: ");
      sb.Append(Version);
      sb.Append(",CreateTime: ");
      sb.Append(CreateTime);
      sb.Append(",Deadline: ");
      sb.Append(Deadline);
      sb.Append(",Title: ");
      sb.Append(Title);
      sb.Append(",Sender: ");
      sb.Append(Sender);
      sb.Append(",Attachments: ");
      sb.Append(Attachments);
      sb.Append(",Content: ");
      sb.Append(Content);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
