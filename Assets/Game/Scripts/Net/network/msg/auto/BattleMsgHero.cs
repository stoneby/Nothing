/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KXSGCodec
{

  /// <summary>
  /// 英雄武将信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BattleMsgHero : TBase
  {
    private int _index;
    private int _templateId;
    private Dictionary<int, int> _fighteProp;
    private Dictionary<int, int> _otherProp;
    private List<int> _leaderSkill;
    private List<int> _activeSkill;
    private List<int> _giftSkill;
    private List<int> _warriorsSkill;
    private List<int> _weaponSkill;

    /// <summary>
    /// 武将位置Index
    /// </summary>
    public int Index
    {
      get
      {
        return _index;
      }
      set
      {
        __isset.index = true;
        this._index = value;
      }
    }

    /// <summary>
    /// 武将模板ID
    /// </summary>
    public int TemplateId
    {
      get
      {
        return _templateId;
      }
      set
      {
        __isset.templateId = true;
        this._templateId = value;
      }
    }

    /// <summary>
    /// 战斗属性map，hp,sp等
    /// </summary>
    public Dictionary<int, int> FighteProp
    {
      get
      {
        return _fighteProp;
      }
      set
      {
        __isset.fighteProp = true;
        this._fighteProp = value;
      }
    }

    /// <summary>
    /// 额外属性，比如怪物掉落显示
    /// </summary>
    public Dictionary<int, int> OtherProp
    {
      get
      {
        return _otherProp;
      }
      set
      {
        __isset.otherProp = true;
        this._otherProp = value;
      }
    }

    /// <summary>
    /// 队长技能
    /// </summary>
    public List<int> LeaderSkill
    {
      get
      {
        return _leaderSkill;
      }
      set
      {
        __isset.leaderSkill = true;
        this._leaderSkill = value;
      }
    }

    /// <summary>
    /// 主动技能
    /// </summary>
    public List<int> ActiveSkill
    {
      get
      {
        return _activeSkill;
      }
      set
      {
        __isset.activeSkill = true;
        this._activeSkill = value;
      }
    }

    /// <summary>
    /// 天赋技能
    /// </summary>
    public List<int> GiftSkill
    {
      get
      {
        return _giftSkill;
      }
      set
      {
        __isset.giftSkill = true;
        this._giftSkill = value;
      }
    }

    /// <summary>
    /// 无双技能
    /// </summary>
    public List<int> WarriorsSkill
    {
      get
      {
        return _warriorsSkill;
      }
      set
      {
        __isset.warriorsSkill = true;
        this._warriorsSkill = value;
      }
    }

    /// <summary>
    /// 武器技能
    /// </summary>
    public List<int> WeaponSkill
    {
      get
      {
        return _weaponSkill;
      }
      set
      {
        __isset.weaponSkill = true;
        this._weaponSkill = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool index;
      public bool templateId;
      public bool fighteProp;
      public bool otherProp;
      public bool leaderSkill;
      public bool activeSkill;
      public bool giftSkill;
      public bool warriorsSkill;
      public bool weaponSkill;
    }

    public BattleMsgHero() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Index = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              TemplateId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                FighteProp = new Dictionary<int, int>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  int _key2;
                  int _val3;
                  _key2 = iprot.ReadI32();
                  _val3 = iprot.ReadI32();
                  FighteProp[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                OtherProp = new Dictionary<int, int>();
                TMap _map4 = iprot.ReadMapBegin();
                for( int _i5 = 0; _i5 < _map4.Count; ++_i5)
                {
                  int _key6;
                  int _val7;
                  _key6 = iprot.ReadI32();
                  _val7 = iprot.ReadI32();
                  OtherProp[_key6] = _val7;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                LeaderSkill = new List<int>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  int _elem10 = 0;
                  _elem10 = iprot.ReadI32();
                  LeaderSkill.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                ActiveSkill = new List<int>();
                TList _list11 = iprot.ReadListBegin();
                for( int _i12 = 0; _i12 < _list11.Count; ++_i12)
                {
                  int _elem13 = 0;
                  _elem13 = iprot.ReadI32();
                  ActiveSkill.Add(_elem13);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                GiftSkill = new List<int>();
                TList _list14 = iprot.ReadListBegin();
                for( int _i15 = 0; _i15 < _list14.Count; ++_i15)
                {
                  int _elem16 = 0;
                  _elem16 = iprot.ReadI32();
                  GiftSkill.Add(_elem16);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                WarriorsSkill = new List<int>();
                TList _list17 = iprot.ReadListBegin();
                for( int _i18 = 0; _i18 < _list17.Count; ++_i18)
                {
                  int _elem19 = 0;
                  _elem19 = iprot.ReadI32();
                  WarriorsSkill.Add(_elem19);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.List) {
              {
                WeaponSkill = new List<int>();
                TList _list20 = iprot.ReadListBegin();
                for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                {
                  int _elem22 = 0;
                  _elem22 = iprot.ReadI32();
                  WeaponSkill.Add(_elem22);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BattleMsgHero");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.index) {
        field.Name = "index";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Index);
        oprot.WriteFieldEnd();
      }
      if (__isset.templateId) {
        field.Name = "templateId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TemplateId);
        oprot.WriteFieldEnd();
      }
      if (FighteProp != null && __isset.fighteProp) {
        field.Name = "fighteProp";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.I32, FighteProp.Count));
          foreach (int _iter23 in FighteProp.Keys)
          {
            oprot.WriteI32(_iter23);
            oprot.WriteI32(FighteProp[_iter23]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (OtherProp != null && __isset.otherProp) {
        field.Name = "otherProp";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.I32, OtherProp.Count));
          foreach (int _iter24 in OtherProp.Keys)
          {
            oprot.WriteI32(_iter24);
            oprot.WriteI32(OtherProp[_iter24]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (LeaderSkill != null && __isset.leaderSkill) {
        field.Name = "leaderSkill";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, LeaderSkill.Count));
          foreach (int _iter25 in LeaderSkill)
          {
            oprot.WriteI32(_iter25);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ActiveSkill != null && __isset.activeSkill) {
        field.Name = "activeSkill";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, ActiveSkill.Count));
          foreach (int _iter26 in ActiveSkill)
          {
            oprot.WriteI32(_iter26);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (GiftSkill != null && __isset.giftSkill) {
        field.Name = "giftSkill";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, GiftSkill.Count));
          foreach (int _iter27 in GiftSkill)
          {
            oprot.WriteI32(_iter27);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (WarriorsSkill != null && __isset.warriorsSkill) {
        field.Name = "warriorsSkill";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, WarriorsSkill.Count));
          foreach (int _iter28 in WarriorsSkill)
          {
            oprot.WriteI32(_iter28);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (WeaponSkill != null && __isset.weaponSkill) {
        field.Name = "weaponSkill";
        field.Type = TType.List;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, WeaponSkill.Count));
          foreach (int _iter29 in WeaponSkill)
          {
            oprot.WriteI32(_iter29);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BattleMsgHero(");
      sb.Append("Index: ");
      sb.Append(Index);
      sb.Append(",TemplateId: ");
      sb.Append(TemplateId);
      sb.Append(",FighteProp: ");
      sb.Append(FighteProp);
      sb.Append(",OtherProp: ");
      sb.Append(OtherProp);
      sb.Append(",LeaderSkill: ");
      sb.Append(LeaderSkill);
      sb.Append(",ActiveSkill: ");
      sb.Append(ActiveSkill);
      sb.Append(",GiftSkill: ");
      sb.Append(GiftSkill);
      sb.Append(",WarriorsSkill: ");
      sb.Append(WarriorsSkill);
      sb.Append(",WeaponSkill: ");
      sb.Append(WeaponSkill);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
