/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KXSGCodec
{

  /// <summary>
  /// 字符串类型属性变化消息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCPropertyChangedString : TBase
  {
    private short _roleType;
    private long _uuid;
    private Dictionary<int, string> _propertyChanged;

    /// <summary>
    /// 角色类型
    /// </summary>
    public short RoleType
    {
      get
      {
        return _roleType;
      }
      set
      {
        __isset.roleType = true;
        this._roleType = value;
      }
    }

    public long Uuid
    {
      get
      {
        return _uuid;
      }
      set
      {
        __isset.uuid = true;
        this._uuid = value;
      }
    }

    /// <summary>
    /// 改变的属性
    /// </summary>
    public Dictionary<int, string> PropertyChanged
    {
      get
      {
        return _propertyChanged;
      }
      set
      {
        __isset.propertyChanged = true;
        this._propertyChanged = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool roleType;
      public bool uuid;
      public bool propertyChanged;
    }

    public SCPropertyChangedString() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I16) {
              RoleType = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              Uuid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                PropertyChanged = new Dictionary<int, string>();
                TMap _map5 = iprot.ReadMapBegin();
                for( int _i6 = 0; _i6 < _map5.Count; ++_i6)
                {
                  int _key7;
                  string _val8;
                  _key7 = iprot.ReadI32();
                  _val8 = iprot.ReadString();
                  PropertyChanged[_key7] = _val8;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SCPropertyChangedString");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.roleType) {
        field.Name = "roleType";
        field.Type = TType.I16;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(RoleType);
        oprot.WriteFieldEnd();
      }
      if (__isset.uuid) {
        field.Name = "uuid";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Uuid);
        oprot.WriteFieldEnd();
      }
      if (PropertyChanged != null && __isset.propertyChanged) {
        field.Name = "propertyChanged";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.String, PropertyChanged.Count));
          foreach (int _iter9 in PropertyChanged.Keys)
          {
            oprot.WriteI32(_iter9);
            oprot.WriteString(PropertyChanged[_iter9]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SCPropertyChangedString(");
      sb.Append("RoleType: ");
      sb.Append(RoleType);
      sb.Append(",Uuid: ");
      sb.Append(Uuid);
      sb.Append(",PropertyChanged: ");
      sb.Append(PropertyChanged);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
