/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KXSGCodec
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCBattlePVEStartMsg : TBase
  {
    private long _uuid;
    private sbyte _battleType;
    private int _raidID;
    private List<KXSGCodec.BattleMsgFighter> _fighterList;

    public long Uuid
    {
      get
      {
        return _uuid;
      }
      set
      {
        __isset.uuid = true;
        this._uuid = value;
      }
    }

    public sbyte BattleType
    {
      get
      {
        return _battleType;
      }
      set
      {
        __isset.battleType = true;
        this._battleType = value;
      }
    }

    public int RaidID
    {
      get
      {
        return _raidID;
      }
      set
      {
        __isset.raidID = true;
        this._raidID = value;
      }
    }

    public List<KXSGCodec.BattleMsgFighter> FighterList
    {
      get
      {
        return _fighterList;
      }
      set
      {
        __isset.fighterList = true;
        this._fighterList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uuid;
      public bool battleType;
      public bool raidID;
      public bool fighterList;
    }

    public SCBattlePVEStartMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Uuid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Byte) {
              BattleType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              RaidID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                FighterList = new List<KXSGCodec.BattleMsgFighter>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  KXSGCodec.BattleMsgFighter _elem2 = new KXSGCodec.BattleMsgFighter();
                  _elem2 = new KXSGCodec.BattleMsgFighter();
                  _elem2.Read(iprot);
                  FighterList.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SCBattlePVEStartMsg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.uuid) {
        field.Name = "uuid";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Uuid);
        oprot.WriteFieldEnd();
      }
      if (__isset.battleType) {
        field.Name = "battleType";
        field.Type = TType.Byte;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(BattleType);
        oprot.WriteFieldEnd();
      }
      if (__isset.raidID) {
        field.Name = "raidID";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RaidID);
        oprot.WriteFieldEnd();
      }
      if (FighterList != null && __isset.fighterList) {
        field.Name = "fighterList";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, FighterList.Count));
          foreach (KXSGCodec.BattleMsgFighter _iter3 in FighterList)
          {
            _iter3.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SCBattlePVEStartMsg(");
      sb.Append("Uuid: ");
      sb.Append(Uuid);
      sb.Append(",BattleType: ");
      sb.Append(BattleType);
      sb.Append(",RaidID: ");
      sb.Append(RaidID);
      sb.Append(",FighterList: ");
      sb.Append(FighterList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
