/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class EquipItemTemplate : TBase
{
  private int _id;
  private string _name;
  private int _iconId;
  private int _picId;
  private string _desc;
  private sbyte _quality;
  private bool _canSale;
  private int _salePrice;
  private sbyte _saleCurrency;
  private sbyte _jobType;
  private bool _canUpLvl;
  private bool _canEvolution;
  private sbyte _upLimit;
  private int _attack;
  private int _attackLvlParam;
  private int _hp;
  private int _hpLvlParam;
  private int _recover;
  private int _recoverLvlParam;
  private int _mp;

  public int Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  /// <summary>
  /// 名字
  /// </summary>
  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  /// <summary>
  /// 图标
  /// </summary>
  public int IconId
  {
    get
    {
      return _iconId;
    }
    set
    {
      __isset.iconId = true;
      this._iconId = value;
    }
  }

  /// <summary>
  /// 图片
  /// </summary>
  public int PicId
  {
    get
    {
      return _picId;
    }
    set
    {
      __isset.picId = true;
      this._picId = value;
    }
  }

  /// <summary>
  /// 描述
  /// </summary>
  public string Desc
  {
    get
    {
      return _desc;
    }
    set
    {
      __isset.desc = true;
      this._desc = value;
    }
  }

  /// <summary>
  /// 品质
  /// </summary>
  public sbyte Quality
  {
    get
    {
      return _quality;
    }
    set
    {
      __isset.quality = true;
      this._quality = value;
    }
  }

  /// <summary>
  /// 可出售
  /// </summary>
  public bool CanSale
  {
    get
    {
      return _canSale;
    }
    set
    {
      __isset.canSale = true;
      this._canSale = value;
    }
  }

  /// <summary>
  /// 出售价格
  /// </summary>
  public int SalePrice
  {
    get
    {
      return _salePrice;
    }
    set
    {
      __isset.salePrice = true;
      this._salePrice = value;
    }
  }

  /// <summary>
  /// 出售货币类型
  /// </summary>
  public sbyte SaleCurrency
  {
    get
    {
      return _saleCurrency;
    }
    set
    {
      __isset.saleCurrency = true;
      this._saleCurrency = value;
    }
  }

  /// <summary>
  /// 职业类型
  /// </summary>
  public sbyte JobType
  {
    get
    {
      return _jobType;
    }
    set
    {
      __isset.jobType = true;
      this._jobType = value;
    }
  }

  /// <summary>
  /// 可升级
  /// </summary>
  public bool CanUpLvl
  {
    get
    {
      return _canUpLvl;
    }
    set
    {
      __isset.canUpLvl = true;
      this._canUpLvl = value;
    }
  }

  /// <summary>
  /// 可进化
  /// </summary>
  public bool CanEvolution
  {
    get
    {
      return _canEvolution;
    }
    set
    {
      __isset.canEvolution = true;
      this._canEvolution = value;
    }
  }

  /// <summary>
  /// 突破上限值
  /// </summary>
  public sbyte UpLimit
  {
    get
    {
      return _upLimit;
    }
    set
    {
      __isset.upLimit = true;
      this._upLimit = value;
    }
  }

  /// <summary>
  /// 攻击力
  /// </summary>
  public int Attack
  {
    get
    {
      return _attack;
    }
    set
    {
      __isset.attack = true;
      this._attack = value;
    }
  }

  /// <summary>
  /// 等级提升攻击加成
  /// </summary>
  public int AttackLvlParam
  {
    get
    {
      return _attackLvlParam;
    }
    set
    {
      __isset.attackLvlParam = true;
      this._attackLvlParam = value;
    }
  }

  /// <summary>
  /// hp
  /// </summary>
  public int Hp
  {
    get
    {
      return _hp;
    }
    set
    {
      __isset.hp = true;
      this._hp = value;
    }
  }

  /// <summary>
  /// 等级提升hp加成
  /// </summary>
  public int HpLvlParam
  {
    get
    {
      return _hpLvlParam;
    }
    set
    {
      __isset.hpLvlParam = true;
      this._hpLvlParam = value;
    }
  }

  /// <summary>
  /// 回复力
  /// </summary>
  public int Recover
  {
    get
    {
      return _recover;
    }
    set
    {
      __isset.recover = true;
      this._recover = value;
    }
  }

  /// <summary>
  /// 等级提升回复加成
  /// </summary>
  public int RecoverLvlParam
  {
    get
    {
      return _recoverLvlParam;
    }
    set
    {
      __isset.recoverLvlParam = true;
      this._recoverLvlParam = value;
    }
  }

  /// <summary>
  /// 气力值
  /// </summary>
  public int Mp
  {
    get
    {
      return _mp;
    }
    set
    {
      __isset.mp = true;
      this._mp = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool name;
    public bool iconId;
    public bool picId;
    public bool desc;
    public bool quality;
    public bool canSale;
    public bool salePrice;
    public bool saleCurrency;
    public bool jobType;
    public bool canUpLvl;
    public bool canEvolution;
    public bool upLimit;
    public bool attack;
    public bool attackLvlParam;
    public bool hp;
    public bool hpLvlParam;
    public bool recover;
    public bool recoverLvlParam;
    public bool mp;
  }

  public EquipItemTemplate() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.I32) {
            Id = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.String) {
            Name = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.I32) {
            IconId = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.I32) {
            PicId = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 5:
          if (field.Type == TType.String) {
            Desc = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 7:
          if (field.Type == TType.Byte) {
            Quality = iprot.ReadByte();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 8:
          if (field.Type == TType.Bool) {
            CanSale = iprot.ReadBool();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 9:
          if (field.Type == TType.I32) {
            SalePrice = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 10:
          if (field.Type == TType.Byte) {
            SaleCurrency = iprot.ReadByte();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 12:
          if (field.Type == TType.Byte) {
            JobType = iprot.ReadByte();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 13:
          if (field.Type == TType.Bool) {
            CanUpLvl = iprot.ReadBool();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 14:
          if (field.Type == TType.Bool) {
            CanEvolution = iprot.ReadBool();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 15:
          if (field.Type == TType.Byte) {
            UpLimit = iprot.ReadByte();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 16:
          if (field.Type == TType.I32) {
            Attack = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 17:
          if (field.Type == TType.I32) {
            AttackLvlParam = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 18:
          if (field.Type == TType.I32) {
            Hp = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 19:
          if (field.Type == TType.I32) {
            HpLvlParam = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 20:
          if (field.Type == TType.I32) {
            Recover = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 21:
          if (field.Type == TType.I32) {
            RecoverLvlParam = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 22:
          if (field.Type == TType.I32) {
            Mp = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("EquipItemTemplate");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (__isset.id) {
      field.Name = "id";
      field.Type = TType.I32;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Id);
      oprot.WriteFieldEnd();
    }
    if (Name != null && __isset.name) {
      field.Name = "name";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Name);
      oprot.WriteFieldEnd();
    }
    if (__isset.iconId) {
      field.Name = "iconId";
      field.Type = TType.I32;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(IconId);
      oprot.WriteFieldEnd();
    }
    if (__isset.picId) {
      field.Name = "picId";
      field.Type = TType.I32;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(PicId);
      oprot.WriteFieldEnd();
    }
    if (Desc != null && __isset.desc) {
      field.Name = "desc";
      field.Type = TType.String;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Desc);
      oprot.WriteFieldEnd();
    }
    if (__isset.quality) {
      field.Name = "quality";
      field.Type = TType.Byte;
      field.ID = 7;
      oprot.WriteFieldBegin(field);
      oprot.WriteByte(Quality);
      oprot.WriteFieldEnd();
    }
    if (__isset.canSale) {
      field.Name = "canSale";
      field.Type = TType.Bool;
      field.ID = 8;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(CanSale);
      oprot.WriteFieldEnd();
    }
    if (__isset.salePrice) {
      field.Name = "salePrice";
      field.Type = TType.I32;
      field.ID = 9;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(SalePrice);
      oprot.WriteFieldEnd();
    }
    if (__isset.saleCurrency) {
      field.Name = "saleCurrency";
      field.Type = TType.Byte;
      field.ID = 10;
      oprot.WriteFieldBegin(field);
      oprot.WriteByte(SaleCurrency);
      oprot.WriteFieldEnd();
    }
    if (__isset.jobType) {
      field.Name = "jobType";
      field.Type = TType.Byte;
      field.ID = 12;
      oprot.WriteFieldBegin(field);
      oprot.WriteByte(JobType);
      oprot.WriteFieldEnd();
    }
    if (__isset.canUpLvl) {
      field.Name = "canUpLvl";
      field.Type = TType.Bool;
      field.ID = 13;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(CanUpLvl);
      oprot.WriteFieldEnd();
    }
    if (__isset.canEvolution) {
      field.Name = "canEvolution";
      field.Type = TType.Bool;
      field.ID = 14;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(CanEvolution);
      oprot.WriteFieldEnd();
    }
    if (__isset.upLimit) {
      field.Name = "upLimit";
      field.Type = TType.Byte;
      field.ID = 15;
      oprot.WriteFieldBegin(field);
      oprot.WriteByte(UpLimit);
      oprot.WriteFieldEnd();
    }
    if (__isset.attack) {
      field.Name = "attack";
      field.Type = TType.I32;
      field.ID = 16;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Attack);
      oprot.WriteFieldEnd();
    }
    if (__isset.attackLvlParam) {
      field.Name = "attackLvlParam";
      field.Type = TType.I32;
      field.ID = 17;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(AttackLvlParam);
      oprot.WriteFieldEnd();
    }
    if (__isset.hp) {
      field.Name = "hp";
      field.Type = TType.I32;
      field.ID = 18;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Hp);
      oprot.WriteFieldEnd();
    }
    if (__isset.hpLvlParam) {
      field.Name = "hpLvlParam";
      field.Type = TType.I32;
      field.ID = 19;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(HpLvlParam);
      oprot.WriteFieldEnd();
    }
    if (__isset.recover) {
      field.Name = "recover";
      field.Type = TType.I32;
      field.ID = 20;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Recover);
      oprot.WriteFieldEnd();
    }
    if (__isset.recoverLvlParam) {
      field.Name = "recoverLvlParam";
      field.Type = TType.I32;
      field.ID = 21;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(RecoverLvlParam);
      oprot.WriteFieldEnd();
    }
    if (__isset.mp) {
      field.Name = "mp";
      field.Type = TType.I32;
      field.ID = 22;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Mp);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder sb = new StringBuilder("EquipItemTemplate(");
    sb.Append("Id: ");
    sb.Append(Id);
    sb.Append(",Name: ");
    sb.Append(Name);
    sb.Append(",IconId: ");
    sb.Append(IconId);
    sb.Append(",PicId: ");
    sb.Append(PicId);
    sb.Append(",Desc: ");
    sb.Append(Desc);
    sb.Append(",Quality: ");
    sb.Append(Quality);
    sb.Append(",CanSale: ");
    sb.Append(CanSale);
    sb.Append(",SalePrice: ");
    sb.Append(SalePrice);
    sb.Append(",SaleCurrency: ");
    sb.Append(SaleCurrency);
    sb.Append(",JobType: ");
    sb.Append(JobType);
    sb.Append(",CanUpLvl: ");
    sb.Append(CanUpLvl);
    sb.Append(",CanEvolution: ");
    sb.Append(CanEvolution);
    sb.Append(",UpLimit: ");
    sb.Append(UpLimit);
    sb.Append(",Attack: ");
    sb.Append(Attack);
    sb.Append(",AttackLvlParam: ");
    sb.Append(AttackLvlParam);
    sb.Append(",Hp: ");
    sb.Append(Hp);
    sb.Append(",HpLvlParam: ");
    sb.Append(HpLvlParam);
    sb.Append(",Recover: ");
    sb.Append(Recover);
    sb.Append(",RecoverLvlParam: ");
    sb.Append(RecoverLvlParam);
    sb.Append(",Mp: ");
    sb.Append(Mp);
    sb.Append(")");
    return sb.ToString();
  }

}

