/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Template
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RaidStageTemplate : TBase
  {
    private int _id;
    private int _raidId;
    private string _stageName;
    private string _stageDesc;
    private int _sceneId;
    private int _costEnergy;
    private int _dailyLimitTimes;
    private bool _stageEnd;
    private int _nextStageId;
    private int _exp;
    private int _gold;
    private int _sprit;
    private int _reputation;
    private int _monsterGroupId;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    /// <summary>
    /// 所属副本ID
    /// </summary>
    public int RaidId
    {
      get
      {
        return _raidId;
      }
      set
      {
        __isset.raidId = true;
        this._raidId = value;
      }
    }

    /// <summary>
    /// 关卡名称
    /// </summary>
    public string StageName
    {
      get
      {
        return _stageName;
      }
      set
      {
        __isset.stageName = true;
        this._stageName = value;
      }
    }

    /// <summary>
    /// 关卡描述
    /// </summary>
    public string StageDesc
    {
      get
      {
        return _stageDesc;
      }
      set
      {
        __isset.stageDesc = true;
        this._stageDesc = value;
      }
    }

    /// <summary>
    /// 场景ID
    /// </summary>
    public int SceneId
    {
      get
      {
        return _sceneId;
      }
      set
      {
        __isset.sceneId = true;
        this._sceneId = value;
      }
    }

    /// <summary>
    /// 消耗体力
    /// </summary>
    public int CostEnergy
    {
      get
      {
        return _costEnergy;
      }
      set
      {
        __isset.costEnergy = true;
        this._costEnergy = value;
      }
    }

    /// <summary>
    /// 每日限制次数
    /// </summary>
    public int DailyLimitTimes
    {
      get
      {
        return _dailyLimitTimes;
      }
      set
      {
        __isset.dailyLimitTimes = true;
        this._dailyLimitTimes = value;
      }
    }

    /// <summary>
    /// 是否关底
    /// </summary>
    public bool StageEnd
    {
      get
      {
        return _stageEnd;
      }
      set
      {
        __isset.stageEnd = true;
        this._stageEnd = value;
      }
    }

    /// <summary>
    /// 后置关卡
    /// </summary>
    public int NextStageId
    {
      get
      {
        return _nextStageId;
      }
      set
      {
        __isset.nextStageId = true;
        this._nextStageId = value;
      }
    }

    /// <summary>
    /// 通关经验
    /// </summary>
    public int Exp
    {
      get
      {
        return _exp;
      }
      set
      {
        __isset.exp = true;
        this._exp = value;
      }
    }

    /// <summary>
    /// 通关金币奖励
    /// </summary>
    public int Gold
    {
      get
      {
        return _gold;
      }
      set
      {
        __isset.gold = true;
        this._gold = value;
      }
    }

    /// <summary>
    /// 通关武魂奖励
    /// </summary>
    public int Sprit
    {
      get
      {
        return _sprit;
      }
      set
      {
        __isset.sprit = true;
        this._sprit = value;
      }
    }

    /// <summary>
    /// 通关声望奖励
    /// </summary>
    public int Reputation
    {
      get
      {
        return _reputation;
      }
      set
      {
        __isset.reputation = true;
        this._reputation = value;
      }
    }

    /// <summary>
    /// 怪物组ID
    /// </summary>
    public int MonsterGroupId
    {
      get
      {
        return _monsterGroupId;
      }
      set
      {
        __isset.monsterGroupId = true;
        this._monsterGroupId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool raidId;
      public bool stageName;
      public bool stageDesc;
      public bool sceneId;
      public bool costEnergy;
      public bool dailyLimitTimes;
      public bool stageEnd;
      public bool nextStageId;
      public bool exp;
      public bool gold;
      public bool sprit;
      public bool reputation;
      public bool monsterGroupId;
    }

    public RaidStageTemplate() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              RaidId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              StageName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              StageDesc = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              SceneId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              CostEnergy = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              DailyLimitTimes = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Bool) {
              StageEnd = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              NextStageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              Exp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              Gold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              Sprit = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I32) {
              Reputation = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              MonsterGroupId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RaidStageTemplate");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.raidId) {
        field.Name = "raidId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RaidId);
        oprot.WriteFieldEnd();
      }
      if (StageName != null && __isset.stageName) {
        field.Name = "stageName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StageName);
        oprot.WriteFieldEnd();
      }
      if (StageDesc != null && __isset.stageDesc) {
        field.Name = "stageDesc";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StageDesc);
        oprot.WriteFieldEnd();
      }
      if (__isset.sceneId) {
        field.Name = "sceneId";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SceneId);
        oprot.WriteFieldEnd();
      }
      if (__isset.costEnergy) {
        field.Name = "costEnergy";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CostEnergy);
        oprot.WriteFieldEnd();
      }
      if (__isset.dailyLimitTimes) {
        field.Name = "dailyLimitTimes";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DailyLimitTimes);
        oprot.WriteFieldEnd();
      }
      if (__isset.stageEnd) {
        field.Name = "stageEnd";
        field.Type = TType.Bool;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(StageEnd);
        oprot.WriteFieldEnd();
      }
      if (__isset.nextStageId) {
        field.Name = "nextStageId";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NextStageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.exp) {
        field.Name = "exp";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Exp);
        oprot.WriteFieldEnd();
      }
      if (__isset.gold) {
        field.Name = "gold";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Gold);
        oprot.WriteFieldEnd();
      }
      if (__isset.sprit) {
        field.Name = "sprit";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Sprit);
        oprot.WriteFieldEnd();
      }
      if (__isset.reputation) {
        field.Name = "reputation";
        field.Type = TType.I32;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Reputation);
        oprot.WriteFieldEnd();
      }
      if (__isset.monsterGroupId) {
        field.Name = "monsterGroupId";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MonsterGroupId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("RaidStageTemplate(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",RaidId: ");
      sb.Append(RaidId);
      sb.Append(",StageName: ");
      sb.Append(StageName);
      sb.Append(",StageDesc: ");
      sb.Append(StageDesc);
      sb.Append(",SceneId: ");
      sb.Append(SceneId);
      sb.Append(",CostEnergy: ");
      sb.Append(CostEnergy);
      sb.Append(",DailyLimitTimes: ");
      sb.Append(DailyLimitTimes);
      sb.Append(",StageEnd: ");
      sb.Append(StageEnd);
      sb.Append(",NextStageId: ");
      sb.Append(NextStageId);
      sb.Append(",Exp: ");
      sb.Append(Exp);
      sb.Append(",Gold: ");
      sb.Append(Gold);
      sb.Append(",Sprit: ");
      sb.Append(Sprit);
      sb.Append(",Reputation: ");
      sb.Append(Reputation);
      sb.Append(",MonsterGroupId: ");
      sb.Append(MonsterGroupId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
